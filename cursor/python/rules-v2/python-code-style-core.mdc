---
description: Основные принципы стиля кода Python, включая PEP 8 и базовые соглашения
globs: "*.py,*.pyi"
alwaysApply: true
related: ["python-naming.mdc", "python-imports.mdc", "python-formatting.mdc"]
priority: 10
---
# Основные принципы стиля кода Python

Базовые правила и рекомендации по стилю кода для Python проектов. Эти правила обеспечивают читаемость, поддерживаемость и единообразие кодовой базы.

---

## Основные принципы

1. **Читаемость превыше всего** - код должен быть легко читаемым и понятным
2. **Единообразие** - стиль должен быть консистентным во всем проекте
3. **Строгая типизация** - использование аннотаций типов для улучшения понимания кода
4. **Минимализм** - код должен быть лаконичным, без избыточности

## Соблюдение стандартов PEP

### PEP 8 - Руководство по стилю кода

Код должен строго соответствовать [PEP 8](https://www.python.org/dev/peps/pep-0008):

- Отступы: 4 пробела (не табуляции)
- Максимальная длина строки: 88 символов
- Пустые строки: 2 между классами и функциями верхнего уровня, 1 между методами
- Импорты: группировать по стандартной библиотеке, сторонним пакетам и локальным модулям

### PEP 257 - Соглашения о докстрингах

Все модули, классы и функции должны иметь докстринги согласно [PEP 257](https://www.python.org/dev/peps/pep-0257):

- Однострочные докстринги: одна строка, описывающая назначение
- Многострочные докстринги: краткое описание, пустая строка, подробное описание

## Рекомендации по написанию кода

### Функции и методы

- Функции должны быть короткими и выполнять одну задачу
- Максимальная длина функции: 50 строк
- Избегать большого количества аргументов (не более 5)
- Использовать именованные аргументы для улучшения читаемости

### Классы

- Классы должны следовать принципу единственной ответственности
- Методы класса должны быть логически связаны
- Использовать свойства (`@property`) вместо геттеров/сеттеров
- Использовать классовые и статические методы по назначению

### Переменные

- Использовать говорящие имена переменных
- Избегать однобуквенных имен (кроме счетчиков в циклах)
- Избегать сокращений, кроме общепринятых
- Не использовать "магические числа", выносить их в константы

## Интеграция с другими правилами

- **Именование**: Подробные правила именования описаны в @python-naming.mdc
- **Импорты**: Правила организации импортов описаны в @python-imports.mdc
- **Форматирование**: Правила форматирования кода описаны в @python-formatting.mdc
- **Типизация**: Правила типизации описаны в @python-typing.mdc
- **Константы и перечисления**: Правила использования констант и перечислений описаны в @python-constants-enums.mdc
- **Инструменты**: Инструменты для проверки стиля описаны в @python-linting-tools.mdc 