---
description: Правила именования переменных, функций, классов и модулей в Python
globs: "*.py,*.pyi"
alwaysApply: true
related: ["code-style/python-code-style-core.mdc"]
priority: 9
---
# Правила именования в Python

Соглашения об именовании для различных элементов кода в Python проектах. Правильное именование улучшает читаемость и понимание кода.

---

## Основные принципы именования

1. **Описательность** - имена должны отражать назначение и содержание
2. **Консистентность** - одинаковые соглашения во всем проекте
3. **Краткость** - имена должны быть достаточно короткими, но информативными
4. **Избегание сокращений** - кроме общепринятых (например, `id`, `url`)

## Соглашения об именовании

### Модули и пакеты

- Использовать `lowercase` или `lowercase_with_underscores`
- Короткие, описательные имена
- Избегать конфликтов с существующими модулями стандартной библиотеки

```python
# Правильно
import user_authentication
import data_processing

# Неправильно
import UserAuthentication
import Data_Processing
```

### Классы

- Использовать `PascalCase`
- Существительные, не глаголы
- Конкретные, описательные имена

```python
# Правильно
class UserProfile:
    pass

class DatabaseConnection:
    pass

# Неправильно
class user_profile:
    pass

class connect_to_database:
    pass
```

### Функции и методы

- Использовать `snake_case`
- Глаголы или глагольные фразы
- Отражать действие, которое выполняет функция

```python
# Правильно
def calculate_total_price(items):
    pass

def get_user_by_id(user_id):
    pass

# Неправильно
def CalculateTotalPrice(items):
    pass

def GetUserById(user_id):
    pass
```

### Переменные

- Использовать `snake_case`
- Существительные или именные фразы
- Описательные имена, отражающие содержимое

```python
# Правильно
user_name = "John"
total_items = 5
is_active = True

# Неправильно
userName = "John"
totalitems = 5
active = True  # недостаточно описательно
```

### Константы

- Использовать `UPPER_CASE_WITH_UNDERSCORES`
- Определять на уровне модуля или класса

```python
# Правильно
MAX_CONNECTIONS = 100
DEFAULT_TIMEOUT = 30
API_BASE_URL = "https://api.example.com"

# Неправильно
maxConnections = 100
default_timeout = 30
```

### Приватные атрибуты и методы

- Начинать с одного подчеркивания `_private_method`
- Для "сильно приватных" атрибутов использовать двойное подчеркивание `__very_private`

```python
class User:
    def __init__(self, name):
        self.name = name  # публичный атрибут
        self._password = None  # "защищенный" атрибут
        self.__token = None  # "приватный" атрибут
    
    def _hash_password(self, password):  # "защищенный" метод
        pass
    
    def __generate_token(self):  # "приватный" метод
        pass
```

### Специальные (магические) методы

- Двойное подчеркивание с обеих сторон `__init__`, `__str__`
- Не создавать собственные магические методы без необходимости

## Особые случаи

### Аргументы функций

- Использовать те же соглашения, что и для переменных (`snake_case`)
- Для аргументов, конфликтующих с ключевыми словами, добавлять подчеркивание в конце: `class_`, `from_`

### Типы

- Для пользовательских типов использовать `PascalCase`
- Для типов-псевдонимов использовать `PascalCase`

```python
from typing import List, Dict, TypeVar

UserId = int
UserDict = Dict[UserId, str]
T = TypeVar('T')  # Для дженериков использовать однобуквенные имена
```

## Интеграция с другими правилами

- **Стиль кода**: Именование должно соответствовать общим правилам стиля кода, описанным в @python-code-style-core.mdc 