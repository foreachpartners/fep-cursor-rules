---
description: Правила стиля кода для Python проектов
globs: 
alwaysApply: false
---
# Правила стиля кода для Python проектов

Набор правил и рекомендаций по стилю кода для Python проектов. Эти правила обеспечивают читаемость, поддерживаемость и единообразие кодовой базы.

---

## Основные принципы

1. **Читаемость превыше всего** - код должен быть легко читаемым и понятным
2. **Единообразие** - стиль должен быть консистентным во всем проекте
3. **Строгая типизация** - использование аннотаций типов для улучшения понимания кода
4. **Минимализм** - код должен быть лаконичным, без избыточности

## Соблюдение стандартов PEP

### PEP 8 - Руководство по стилю кода

Код должен строго соответствовать [PEP 8](mdc:https:/www.python.org/dev/peps/pep-0008):

- Отступы: 4 пробела (не табуляции)
- Максимальная длина строки: 88 символов
- Пустые строки: 2 между классами и функциями верхнего уровня, 1 между методами
- Импорты: группировать по стандартной библиотеке, сторонним пакетам и локальным модулям

### PEP 257 - Соглашения о докстрингах

Все модули, классы и функции должны иметь докстринги согласно [PEP 257](mdc:https:/www.python.org/dev/peps/pep-0257):

- Однострочные докстринги: одна строка, описывающая назначение
- Многострочные докстринги: краткое описание, пустая строка, подробное описание

## Именование

Необходимо использовать следующие соглашения об именовании:

- **Модули и пакеты**: `lowercase` или `lowercase_with_underscores`
- **Классы**: `PascalCase`
- **Функции и методы**: `snake_case`
- **Переменные**: `snake_case`
- **Константы**: `UPPER_CASE_WITH_UNDERSCORES`
- **Приватные атрибуты и методы**: начинаются с одного подчеркивания `_private_method`
- **"Магические" методы**: двойное подчеркивание с обеих сторон `__init__`

## Типизация

Необходимо использовать аннотации типов согласно [PEP 484](mdc:https:/www.python.org/dev/peps/pep-0484):

```python
def calculate_total(items: list[float], tax_rate: float) -> float:
    """
    Calculate total price including tax.
    
    Args:
        items: List of item prices
        tax_rate: Tax rate as a decimal (e.g., 0.1 for 10%)
        
    Returns:
        Total price including tax
    """
    subtotal = sum(items)
    return subtotal * (1 + tax_rate)
```

### Рекомендации по типизации

- Использовать типизацию для всех функций и методов
- Для сложных типов использовать `typing` модуль
- Использовать `Optional[T]` для параметров, которые могут быть `None`
- Использовать `Union[T1, T2]` для параметров, которые могут иметь разные типы
- Использовать `TypeVar` и дженерики для полиморфных функций

## Использование констант и перечислений

### Запрет строковых литералов

Строковые литералы не должны использоваться в коде в качестве идентификаторов, ключей или других значений, которые могут быть типизированы. Вместо этого необходимо использовать константы, перечисления (`Enum`) и другие строготипизированные механизмы:

```python
# Неправильно: использование строковых литералов
if "status" in response and response["status"] == "success":
    process_success(response["data"])
elif "status" in response and response["status"] == "error":
    handle_error(response["error_message"])

# Правильно: использование перечислений
class ResponseKey(str, Enum):
    STATUS = "status"
    DATA = "data"
    ERROR_MESSAGE = "error_message"

class StatusValue(str, Enum):
    SUCCESS = "success"
    ERROR = "error"

if ResponseKey.STATUS in response and response[ResponseKey.STATUS] == StatusValue.SUCCESS:
    process_success(response[ResponseKey.DATA])
elif ResponseKey.STATUS in response and response[ResponseKey.STATUS] == StatusValue.ERROR:
    handle_error(response[ResponseKey.ERROR_MESSAGE])
```

### Преимущества использования констант и перечислений

1. **Типобезопасность** - ошибки обнаруживаются на этапе компиляции, а не во время выполнения
2. **Автодополнение в IDE** - IDE может предлагать доступные значения
3. **Централизованное управление** - все константы определены в одном месте
4. **Защита от опечаток** - опечатки в строковых литералах не обнаруживаются компилятором
5. **Рефакторинг** - изменение значения константы автоматически применяется во всех местах использования

### Рекомендации по использованию констант и перечислений

- Определять все константы в модуле `constants.py` или в соответствующих модулях
- Использовать `Enum` для связанных констант
- Наследовать строковые перечисления от `str, Enum` для сохранения строкового представления
- Использовать `IntEnum` для числовых перечислений
- Использовать `auto()` для автоматической нумерации в перечислениях, где значения не важны

## Организация кода

### Импорты

Импорты должны быть организованы в следующем порядке:

1. Стандартная библиотека Python
2. Сторонние библиотеки
3. Локальные модули проекта

Внутри каждой группы импорты должны быть отсортированы в алфавитном порядке:

```python
# Стандартная библиотека
import os
import sys
from datetime import datetime

# Сторонние библиотеки
import numpy as np
import pandas as pd
from django.db import models

# Локальные модули
from myproject.core import utils
from myproject.models import User
```

### Структура файла

Файлы должны быть организованы в следующем порядке:

1. Шебанг (если необходимо)
2. Докстринг модуля
3. Импорты (в правильном порядке)
4. Константы
5. Определения классов
6. Определения функций
7. Код для выполнения при импорте (минимизировать)
8. Блок `if __name__ == "__main__"` (если необходимо)

## Форматирование кода

### Отступы и пробелы

- Использовать 4 пробела для отступов
- Не использовать табуляцию
- Не оставлять пробелы в конце строк
- Окружать операторы пробелами: `x = 1 + 2`
- Не использовать пробелы внутри скобок: `func(arg1, arg2)`
- Использовать пробелы после запятых: `func(arg1, arg2)`

### Длина строк

- Максимальная длина строки: 88 символов
- Для длинных строк использовать перенос с отступом:

```python
def long_function_name(
    arg1: str,
    arg2: int,
    arg3: float,
) -> bool:
    return True
```

### Комментарии

- Комментарии должны быть только на английском языке
- Использовать комментарии только когда поведение кода неочевидно
- Комментарии должны объяснять "почему", а не "что" делает код
- Устаревшие комментарии должны быть удалены

## Рекомендации по написанию кода

### Функции и методы

- Функции должны быть короткими и выполнять одну задачу
- Максимальная длина функции: 50 строк
- Избегать большого количества аргументов (не более 5)
- Использовать именованные аргументы для улучшения читаемости

### Классы

- Классы должны следовать принципу единственной ответственности
- Методы класса должны быть логически связаны
- Использовать свойства (`@property`) вместо геттеров/сеттеров
- Использовать классовые и статические методы по назначению

### Переменные

- Использовать говорящие имена переменных
- Избегать однобуквенных имен (кроме счетчиков в циклах)
- Избегать сокращений, кроме общепринятых
- Не использовать "магические числа", выносить их в константы

## Интеграция с другими компонентами

- **Структура проекта**: Стиль кода должен соответствовать структуре проекта, описанной в правиле @python-project-layout.mdc. Смотри подробнее правила структуры проекта в @python-project-layout.mdc.
- **Тестирование**: Тесты должны следовать тем же правилам стиля, что и основной код, согласно @python-testing.mdc. Смотри подробнее правила тестирования в @python-testing.mdc.
- **Управление зависимостями**: При добавлении новых зависимостей следует использовать `uv`, как описано в @using-uv.mdc. Смотри подробнее правила управления зависимостями в @using-uv.mdc.
- **Конфигурация IDE**: Для автоматизации форматирования следует использовать настройки VSCode, описанные в @vscode-python-config.mdc. Смотри подробнее правила настройки IDE в @vscode-python-config.mdc.
- **Документирование**: Стиль кода должен соответствовать правилам документирования, описанным в @python-documentation.mdc. Смотри подробнее правила документирования в @python-documentation.mdc.

## Инструменты для проверки стиля

Для автоматической проверки и форматирования кода необходимо использовать:

- **black** - для форматирования кода
- **isort** - для сортировки импортов
- **flake8** - для проверки стиля
- **mypy** - для проверки типов

Пример настройки в `pyproject.toml`:

```toml
[tool.black]
line-length = 88
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
``` 