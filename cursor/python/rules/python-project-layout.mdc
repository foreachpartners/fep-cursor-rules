---
description: Организация исходного кода в проектах Python
globs: 
alwaysApply: false
related: ["python-code-style.mdc", "python-documentation.mdc", "python-architecture.mdc", "python-testing.mdc", "python-error-handling.mdc", "python-logging.mdc", "using-uv.mdc", "vscode-python-config.mdc"]
---
# Организация исходного кода в проектах Python

Структура проекта Python, соответствующая современным best practices. Обеспечивает разделение исходного кода, исполняемых файлов и тестов.

---

## Структура проекта

```plaintext
my_project/
├── src/
│   └── my_project/         # Основной пакет приложения
│       ├── __init__.py
│       ├── core/           # Подпакет для базовой функциональности
│       │   ├── __init__.py
│       │   ├── utils.py
│       │   └── config.py
│       ├── services/       # Подпакет для специализированных сервисов
│       │   ├── __init__.py
│       │   └── data_processor.py
│       └── main.py         # Основной исполняемый файл
├── bin/                    # Каталог для исполняемых файлов
│   ├── run_main.py
│   └── analyze_data.py
├── tests/                  # Тесты для проекта
│   ├── test_core.py
│   └── test_services.py
├── pyproject.toml          # Конфигурация сборки и зависимостей
├── README.md               # Документация проекта
└── .gitignore
```

## Технические аспекты организации кода

### Разделение исходного кода и исполняемых файлов
Исходный код должен находиться в каталоге `src/`, а исполняемые скрипты — в `bin/`. Это предотвращает конфликты импортов и обеспечивает чистоту проекта.

### Использование абсолютных импортов
Импорты внутри пакета должны осуществляться по полным путям:
```python
from my_project.core.utils import greet
```
Это улучшает читаемость и поддержку кода, а также предотвращает циклические импорты.

### Логическая организация функциональности
Функциональность должна быть разделена на отдельные пакеты и подпакеты:
- `core/` - базовые компоненты, используемые во всем проекте
- `services/` - специализированные сервисы для конкретных задач

### Тестирование
Тесты должны располагаться в отдельном каталоге `tests/`, что обеспечивает:
- Изоляцию тестового кода от основного кода
- Возможность запуска всех тестов одной командой
- Соответствие структуры тестов структуре исходного кода

## Примеры файлов и их взаимодействие

### Модуль с утилитами (src/my_project/core/utils.py)
```python
def greet(name: str) -> str:
    return f"Hello, {name}!"
```

### Основной модуль (src/my_project/main.py)
```python
from my_project.core.utils import greet

def main():
    print(greet("World"))

if __name__ == "__main__":
    main()
```

### Исполняемый скрипт (bin/run_main.py)
```python
#!/usr/bin/env python
from my_project.main import main

if __name__ == "__main__":
    main()
```

## Интеграция с другими компонентами

- **Управление зависимостями**: Совместимо с инструментом `uv` для управления зависимостями (см. правило @using-uv.mdc). Смотри подробнее правила управления зависимостями в @using-uv.mdc.
- **Конфигурация IDE**: Оптимизировано для работы с настройками VSCode (см. правило @vscode-python-config.mdc). Смотри подробнее правила настройки IDE в @vscode-python-config.mdc.
- **Управление тестами**: Структура проекта поддерживает организацию тестов согласно правилу @python-testing.mdc. Смотри подробнее правила тестирования в @python-testing.mdc.
- **Архитектура**: Структура проекта соответствует архитектурным принципам, описанным в @python-architecture.mdc. Смотри подробнее правила архитектуры в @python-architecture.mdc.
- **Стиль кода**: Структура проекта поддерживает соблюдение правил стиля кода, описанных в @python-code-style.mdc. Смотри подробнее правила стиля кода в @python-code-style.mdc.
- **Документирование**: Структура проекта включает места для документации согласно @python-documentation.mdc. Смотри подробнее правила документирования в @python-documentation.mdc.
- **Сборка и публикация**: Поддерживает стандартные инструменты сборки Python-пакетов через `pyproject.toml`

## Технические преимущества

- Изоляция исходного кода в пакете `src/my_project/` предотвращает конфликты имен
- Абсолютные импорты обеспечивают однозначность и предсказуемость
- Разделение на подпакеты улучшает масштабируемость и поддерживаемость
- Отдельный каталог для тестов упрощает интеграцию с инструментами CI/CD 