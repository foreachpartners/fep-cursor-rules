---
description: Сводное руководство по разработке на Python
globs: 
alwaysApply: true
related: ["python-code-style.mdc", "python-documentation.mdc", "python-logging.mdc", "python-error-handling.mdc", "python-architecture.mdc", "python-project-layout.mdc", "python-testing.mdc", "using-uv.mdc", "vscode-python-config.mdc"]
---
# Сводное руководство по разработке на Python

Ключевые принципы и правила разработки на Python. Это руководство содержит основные рекомендации и ссылки на подробные правила.

---

## Ключевые приоритеты

1. **Читаемость кода** - наивысший приоритет (100/100)
2. **Тестируемость** - высокий приоритет (50/100)
3. **Производительность** - низкий приоритет (10/100)

## Основные правила

### Стиль кода (@python-code-style.mdc)
- Применять при написании и форматировании любого кода
- Строгое соблюдение PEP 8 и PEP 257
- Использование типизации для всех функций и методов
- Именование в стиле `snake_case` для функций и переменных
- Комментарии только на английском языке и только когда необходимо
- Запрет на использование строковых литералов в качестве идентификаторов, ключей или других значений, которые могут быть типизированы
- Использование констант, перечислений (`Enum`) и других строготипизированных механизмов вместо строковых литералов
- Подробные правила стиля кода смотри в @python-code-style.mdc

### Документация (@python-documentation.mdc)
- Применять при создании новых модулей, классов, функций и при изменении существующих
- Докстринги для всех модулей, классов и функций
- Актуализация документации при любых изменениях
- Документация на английском языке
- README.md в корне проекта и подробная документация в `/docs`
- Подробные правила документирования смотри в @python-documentation.mdc

### Тестирование (@python-testing.mdc)
- Применять при разработке любой новой функциональности и изменении существующей
- Следование принципам TDD (Test-Driven Development) с циклом Red-Green-Refactor
- Написание тестов перед реализацией функциональности
- Тесты для каждого изменения в коде
- Запуск тестов после каждого изменения
- Принятие задачи только при успешном прохождении всех тестов
- Использование pytest для написания и запуска тестов
- Подробные правила тестирования, включая структуру тестов, лучшие практики и рабочий процесс TDD, смотри в @python-testing.mdc

### Архитектура (@python-architecture.mdc)
- Применять при проектировании компонентов и их взаимодействия
- Модульность и повторное использование кода
- Разделение ответственности
- Использование ORM и model-first подход к базам данных
- Инъекция зависимостей для улучшения тестируемости
- Подробные правила архитектуры смотри в @python-architecture.mdc

### Обработка ошибок (@python-error-handling.mdc)
- Применять при работе с исключениями и обработке ошибок
- Минимальное количество классов исключений
- Обработка исключений там, где они ожидаются
- Информативные сообщения об ошибках
- Интеграция с логированием
- Подробные правила обработки ошибок смотри в @python-error-handling.mdc

### Логирование (@python-logging.mdc)
- Применять при добавлении логирования в код
- Консистентное логирование ключевых операций
- Использование соответствующих уровней логирования
- Структурированные и информативные сообщения
- Контекстная информация в логах
- Подробные правила логирования смотри в @python-logging.mdc

### Структура проекта (@python-project-layout.mdc)
- Применять при создании новых проектов и организации файлов
- Исходный код в директории `src/`
- Тесты в директории `tests/`
- Документация в директории `docs/`
- Разделение кода на логические модули
- Подробные правила структуры проекта смотри в @python-project-layout.mdc

### Управление зависимостями (@using-uv.mdc)
- Применять при добавлении, обновлении или удалении зависимостей
- Использование `uv` для управления зависимостями
- Фиксация версий в `pyproject.toml`
- Разделение основных и dev-зависимостей
- Использование виртуальных окружений
- Подробные правила управления зависимостями смотри в @using-uv.mdc

### Настройка IDE (@vscode-python-config.mdc)
- Применять при настройке среды разработки
- Настройка VSCode для работы с Python
- Интеграция с инструментами форматирования и линтинга
- Настройка отладчика
- Интеграция с системой тестирования
- Подробные правила настройки IDE смотри в @vscode-python-config.mdc

## Аспекты, на которые НЕ нужно обращать внимание

- **Мониторинг** - не входит в область этих правил
- **Интеграционные тесты** - фокус только на юнит-тестах
- **Высокоуровневая архитектура** (MVC, MVVM, Clean Architecture)
- **Микросервисная vs монолитная архитектура**
- **Методологии разработки** (Agile, Scrum, Kanban)
- **Масштабируемость** - не является приоритетом
- **Производительность** - важна только в очевидных случаях
- **Безопасность** - важна только в очевидных случаях

## Процесс разработки

1. **Планирование**
   - Определение требований
   - Разбиение на задачи

2. **Разработка по TDD**
   - **Red**: Написание тестов, которые не проходят - см. @python-testing.mdc
   - **Green**: Реализация минимальной функциональности для прохождения тестов - см. @python-code-style.mdc и @python-architecture.mdc
   - **Refactor**: Улучшение кода с сохранением его функциональности
   - Документирование - см. @python-documentation.mdc
   - Логирование - см. @python-logging.mdc
   - Обработка ошибок - см. @python-error-handling.mdc

3. **Проверка**
   - Запуск тестов - см. @python-testing.mdc
   - Проверка стиля кода - см. @python-code-style.mdc
   - Проверка типов - см. @python-code-style.mdc

4. **Завершение**
   - Обновление документации - см. @python-documentation.mdc
   - Коммит изменений 