---
description: Установка и удаление пакетов, сборка проекта, запуск скриптов и тестов
globs: 
alwaysApply: false
related: ["python-code-style.mdc", "python-documentation.mdc", "python-architecture.mdc", "python-testing.mdc", "python-project-layout.mdc", "vscode-python-config.mdc"]
---
# Управление зависимостями с uv в проектах Python

В проектах используется `uv` для управления зависимостями и выполнения задач разработки. Это пакетный менеджер для Python, написанный на Rust, обеспечивающий высокую производительность.

## Технические принципы управления зависимостями

1. **Явное объявление зависимостей** - все зависимости указываются в `pyproject.toml`
2. **Фиксация версий** - для воспроизводимости сборок используется файл блокировки `uv.lock`
3. **Разделение основных и dev-зависимостей** - разработческие зависимости добавляются с флагом `--dev`
4. **Минимальные версии** - указывается минимально необходимая версия пакета с оператором `>=`

## Технические операции

### Инициализация проекта
```bash
uv init
```
Создает базовую структуру проекта с файлом `pyproject.toml`.

### Управление зависимостями
```bash
# Добавление основных зависимостей
uv add <package_name>>=<min_version>

# Добавление dev-зависимостей
uv add --dev <package_name>>=<min_version>

# Удаление основных зависимостей
uv remove <package_name>

# Удаление dev-зависимостей
uv remove --dev <package_name>

# Установка всех зависимостей из pyproject.toml
uv sync
```

### Запуск инструментов разработки
```bash
# Запуск тестов
uv run pytest
uv run pytest tests/test_services.py

# Форматирование и проверка кода
uv run black src/ tests/
uv run isort src/ tests/
uv run mypy src/

# Запуск приложения
uv run python bin/run_main.py
```

## Интеграция с другими компонентами

- **Структура проекта**: Совместимо со структурой проекта, описанной в правиле @python-project-layout.mdc. Смотри подробнее правила структуры проекта в @python-project-layout.mdc.
- **Конфигурация IDE**: Интегрируется с настройками VSCode, описанными в правиле @vscode-python-config.mdc. Смотри подробнее правила настройки IDE в @vscode-python-config.mdc.
- **Управление тестами**: Поддерживает запуск тестов согласно правилу @python-testing.mdc. Смотри подробнее правила тестирования в @python-testing.mdc.
- **Стиль кода**: Поддерживает инструменты форматирования и проверки стиля согласно @python-code-style.mdc. Смотри подробнее правила стиля кода в @python-code-style.mdc.
- **Сборка пакетов**: Поддерживает стандартные инструменты сборки Python-пакетов через `pyproject.toml`

## Технические рекомендации

- **Избегайте конфликтов версий** - необходимо проверять совместимость при добавлении новых пакетов
- **Регулярно обновляйте зависимости** - помогает избежать накопления технического долга
- **Минимизируйте количество зависимостей** - каждая новая зависимость увеличивает риск конфликтов
- **Документируйте причины добавления** - при добавлении неочевидных зависимостей оставляйте комментарий

## Технические преимущества

- **Высокая производительность** - операции выполняются значительно быстрее по сравнению с pip
- **Воспроизводимость сборок** - файл блокировки обеспечивает идентичность окружений
- **Изоляция окружений** - каждый проект имеет собственное виртуальное окружение
- **Совместимость с PEP 621** - использует стандартный формат `pyproject.toml` для метаданных проекта 