---
description: Настройка VSCode для Python проектов
globs: 
alwaysApply: false
related: ["python-code-style.mdc", "python-documentation.mdc", "python-architecture.mdc", "python-testing.mdc", "python-project-layout.mdc", "using-uv.mdc"]
---
# Настройка VSCode для Python проектов

Конфигурация VSCode для эффективной работы с Python проектами. Данные настройки обеспечивают корректную работу с импортами, отладкой и тестированием.

---

## Основные файлы конфигурации

```plaintext
.vscode/
├── settings.json       # Основные настройки проекта
└── launch.json         # Конфигурация для запуска и отладки
```

## Настройки проекта (settings.json)

```json
{
    "python.analysis.extraPaths": ["src"],
    "python.testing.pytestArgs": ["tests"],
    "python.defaultInterpreterPath": ".venv/bin/python",
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false
}
```

### Ключевые настройки

#### Пути для анализа кода
```json
"python.analysis.extraPaths": ["src"]
```
Добавляет директорию `src` в пути для анализа кода, что позволяет корректно импортировать модули из этой директории согласно структуре проекта (см. правило @python-project-layout.mdc).

#### Интерпретатор Python
```json
"python.defaultInterpreterPath": ".venv/bin/python"
```
Указывает путь к интерпретатору Python в виртуальном окружении проекта. Виртуальное окружение создается в директории `.venv` с помощью инструмента `uv` (см. правило @using-uv.mdc).

#### Настройки тестирования
```json
"python.testing.pytestEnabled": true,
"python.testing.unittestEnabled": false,
"python.testing.pytestArgs": ["tests"]
```
Конфигурирует использование pytest для тестирования, указывает директорию `tests/` для тестов. Это соответствует рекомендациям в правиле @python-testing.mdc.

## Конфигурация запуска и отладки (launch.json)

```json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "main",
            "type": "debugpy",
            "request": "launch",
            "module": "my_project.main",
            "console": "integratedTerminal",
            "justMyCode": true,
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${workspaceFolder}/src"
            }
        }
    ]
}
```

### Ключевые параметры

#### Тип отладчика
```json
"type": "debugpy"
```
Указывает на использование debugpy для отладки Python кода.

#### Запускаемый модуль
```json
"module": "my_project.main"
```
Определяет основной модуль приложения для запуска. В данном примере используется модуль `my_project.main`, где `my_project` - это название пакета проекта. При настройке своего проекта замените его на имя вашего пакета (например, `your_app.main`).

#### Рабочая директория
```json
"cwd": "${workspaceFolder}"
```
Устанавливает корневую директорию проекта как рабочую директорию.

#### Переменные окружения
```json
"env": {
    "PYTHONPATH": "${workspaceFolder}/src"
}
```
Добавляет директорию `src` в `PYTHONPATH`, что позволяет корректно импортировать модули при запуске согласно структуре проекта с исходным кодом в директории `src/`.

## Технические рекомендации

1. **Структура проекта**: Конфигурация оптимизирована для работы со структурой проекта, описанной в правиле @python-project-layout.mdc, с исходным кодом в директории `src/` и тестами в директории `tests/`
2. **Импорты**: Настройки обеспечивают корректную работу абсолютных импортов из пакета проекта
3. **Отладка**: Для отладки используется модуль debugpy, который интегрируется с VSCode и позволяет эффективно отлаживать код

## Интеграция с другими компонентами

- **Структура проекта**: Конфигурация оптимизирована для работы со структурой проекта, описанной в @python-project-layout.mdc. Смотри подробнее правила структуры проекта в @python-project-layout.mdc.
- **Управление зависимостями**: Интегрируется с инструментом `uv`, описанным в @using-uv.mdc. Смотри подробнее правила управления зависимостями в @using-uv.mdc.
- **Тестирование**: Поддерживает запуск тестов согласно @python-testing.mdc. Смотри подробнее правила тестирования в @python-testing.mdc.
- **Стиль кода**: Интегрируется с инструментами форматирования и проверки стиля согласно @python-code-style.mdc. Смотри подробнее правила стиля кода в @python-code-style.mdc.

## Заключение

Данная конфигурация обеспечивает:

- Корректное разрешение импортов из директории `src/`
- Интеграцию с системой тестирования в директории `tests/`
- Эффективную отладку Python-кода с помощью debugpy
- Совместимость со структурой проекта, описанной в @python-project-layout.mdc, и инструментами управления зависимостями из @using-uv.mdc
- Поддержку процесса тестирования согласно правилу @python-testing.mdc
