---
description: "Recommended project structure and file organization for Next.js applications using the App Router"
globs: 
alwaysApply: false
related: ["nextjs-api-service-layer.mdc", "nextjs-typescript.mdc", "nextjs-linting.mdc", "nextjs-shadcn-ui.mdc"]
---
# Next.js Project Structure

This document outlines the recommended project structure and file organization for Next.js applications using the App Router. For API service layer organization, see @nextjs-api-service-layer.mdc. For TypeScript configuration, refer to @nextjs-typescript.mdc. For linting and formatting guidelines, see @nextjs-linting.mdc. For shadcn/ui integration, see @nextjs-shadcn-ui.mdc.

## Directory Structure

```
my-next-app/
├── .eslintrc.js           # ESLint configuration
├── .gitignore             # Git ignore file
├── .prettierrc            # Prettier configuration
├── next.config.js         # Next.js configuration
├── package.json           # Project dependencies and scripts
├── tsconfig.json          # TypeScript configuration
├── public/                # Static assets (images, fonts, etc.)
│   ├── favicon.ico
│   ├── images/
│   └── fonts/
├── src/                   # Source code directory
│   ├── app/               # App Router structure
│   │   ├── auth/          # Authentication routes
│   │   │   ├── login/
│   │   │   │   └── page.tsx
│   │   │   ├── register/
│   │   │   │   └── page.tsx
│   │   │   └── layout.tsx
│   │   ├── dashboard/     # Dashboard routes
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   ├── api/           # API Routes
│   │   │   └── [...]
│   │   ├── globals.css    # Global styles
│   │   ├── layout.tsx     # Root layout
│   │   └── page.tsx       # Home page
│   ├── components/        # UI Components
│   │   ├── ui/            # shadcn/ui components (if used)
│   │   │   ├── button.tsx
│   │   │   ├── input.tsx
│   │   │   └── ...
│   │   ├── atoms/         # Basic building blocks
│   │   │   ├── logo.tsx
│   │   │   ├── icon-button.tsx
│   │   │   └── ...
│   │   ├── molecules/     # Combinations of atoms
│   │   │   ├── search-bar.tsx
│   │   │   ├── notification-card.tsx
│   │   │   └── ...
│   │   ├── organisms/     # Complex UI sections
│   │   │   ├── header.tsx
│   │   │   ├── sidebar.tsx
│   │   │   └── ...
│   │   ├── templates/     # Page layout templates
│   │   │   ├── dashboard-template.tsx
│   │   │   └── ...
│   │   └── index.ts       # Export all components
│   ├── hooks/             # Custom React hooks
│   │   ├── use-auth.ts
│   │   ├── use-form.ts
│   │   └── index.ts
│   ├── lib/               # Utility functions and shared code
│   │   ├── utils.ts
│   │   ├── constants.ts
│   │   └── types.ts
│   ├── services/          # API service layer
│   │   ├── api-client.ts  # Base API client setup
│   │   ├── endpoints.ts   # API endpoints constants
│   │   ├── auth-service.ts # Auth-related API calls
│   │   ├── user-service.ts # User-related API calls
│   │   └── mock/          # Mock data for development
│   │       ├── auth.json
│   │       └── users.json
│   ├── store/             # Zustand state management
│   │   ├── auth-store.ts
│   │   ├── user-store.ts
│   │   └── index.ts
│   ├── styles/            # Component-specific styles (if not using CSS-in-JS)
│   │   └── tailwind/      # Tailwind custom configurations
│   │       └── theme.ts
│   ├── tests/             # Test files
│   │   ├── __mocks__/     # Test mocks
│   │   ├── utils/         # Test utilities
│   │   └── components/    # Component tests
│   └── .storybook/        # Storybook configuration
│       ├── main.js
│       └── preview.js
```

## App Router Organization

The App Router follows a file-system based approach to routing:

- `app/page.tsx`: The main entry page of your application
- `app/layout.tsx`: The root layout that wraps all pages
- `app/api/`: API routes that run on the server
- `app/[param]/`: Dynamic route segments

### Route Organization and Naming Conventions

When organizing routes in the App Router, follow these guidelines:

#### Standard Route Structure

Use a clear, hierarchical folder structure that directly maps to your URL paths:

```
app/
  ├── auth/             # URL: /auth
  │   ├── login/        # URL: /auth/login
  │   │   └── page.tsx
  │   ├── register/     # URL: /auth/register
  │   │   └── page.tsx
  │   └── layout.tsx    # Shared layout for auth routes
  ├── dashboard/        # URL: /dashboard
  │   ├── page.tsx
  │   ├── settings/     # URL: /dashboard/settings
  │   │   └── page.tsx
  │   └── layout.tsx    # Shared layout for dashboard routes
  └── page.tsx          # URL: /
```

**Important rules:**
- **Avoid special characters in folder names** - as a general rule, don't use parentheses, brackets, or other special characters in folder names
- **Exception for parallel routes**: The `@` symbol is the only allowed special character, used specifically for slot names in parallel routes (e.g., `@sidebar`, `@content`)
- Use descriptive, feature-based folder names
- Create logical hierarchies that match your application's information architecture
- Use shared layouts at appropriate levels of the hierarchy

#### Multiple Layouts

To implement different layouts for different sections of your app:

```
app/
  ├── layout.tsx        # Base layout with minimal shared elements
  ├── auth/
  │   ├── layout.tsx    # Auth-specific layout
  │   ├── login/
  │   │   └── page.tsx
  │   └── register/
  │       └── page.tsx
  ├── dashboard/
  │   ├── layout.tsx    # Dashboard-specific layout
  │   └── page.tsx
  └── page.tsx
```

This approach uses nested layouts instead of route groups to achieve the same result of having different layouts for different sections.

#### Parallel Routes

For complex UI with multiple independent sections, use parallel routes with slots:

```
app/
  ├── layout.tsx        # Layout with slots: @sidebar and @content
  ├── @sidebar/         # Sidebar slot
  │   ├── page.tsx      # Default sidebar
  │   └── settings/
  │       └── page.tsx  # Settings sidebar
  └── @content/         # Main content slot
      ├── page.tsx      # Default content
      └── settings/
          └── page.tsx  # Settings content
```

Note: The `@` symbol is used for slot names in parallel routes and is a valid part of the Next.js routing system. This is the only exception to our "no special characters in folder names" rule.

### File and Folder Naming Conventions

Follow these naming conventions for files and folders in your Next.js application:

1. **Routes and Pages**
   - Use kebab-case for route folders: `user-profile/`, `product-details/`
   - Use PascalCase for page components: `page.tsx`
   - Use descriptive, feature-based names for routes

2. **Components**
   - Use PascalCase for component files: `Button.tsx`, `UserProfile.tsx`
   - Use PascalCase for component folders: `Button/`, `UserProfile/`
   - Group related components in feature folders

3. **Utilities and Helpers**
   - Use camelCase for utility files: `formatDate.ts`, `useLocalStorage.ts`
   - Use descriptive, action-based names for utilities

4. **Constants and Types**
   - Use PascalCase for type files: `UserTypes.ts`, `ApiTypes.ts`
   - Use UPPER_SNAKE_CASE for constant values: `API_ENDPOINTS`, `DEFAULT_LOCALE`
   - Use camelCase for constant files: `apiEndpoints.ts`, `routeConstants.ts`

5. **Special Files**
   - Use the standard Next.js file names for special files: `layout.tsx`, `loading.tsx`, `error.tsx`, `not-found.tsx`
   - Use `index.ts` for barrel exports from directories

6. **Test Files**
   - Append `.test.ts` or `.test.tsx` to test files: `Button.test.tsx`
   - Place test files next to the files they test

7. **Storybook Files**
   - Append `.stories.ts` or `.stories.tsx` to Storybook files: `Button.stories.tsx`
   - Place story files next to the components they document

### App Router Special Files

Next.js App Router uses several special files with specific purposes:

| File             | Purpose                                                  |
|------------------|----------------------------------------------------------|
| `page.tsx`       | UI for a route segment, makes the route publicly accessible |
| `layout.tsx`     | Shared UI for a segment and its children                 |
| `loading.tsx`    | Loading UI for a segment and its children                |
| `error.tsx`      | Error UI for a segment and its children                  |
| `not-found.tsx`  | Not found UI for a segment and its children              |
| `route.ts`       | Server-side API endpoint                                 |
| `middleware.ts`  | Request middleware (at the app level)                    |

## Component Organization

### Atomic Design with shadcn/ui

We recommend organizing UI components following the Atomic Design methodology, which can be seamlessly integrated with shadcn/ui components. For detailed information on shadcn/ui integration, see @nextjs-shadcn-ui.mdc.

#### Component Structure with shadcn/ui

When using shadcn/ui, organize your components as follows:

```
src/
├── components/
│   ├── ui/                # shadcn/ui base components
│   │   ├── button.tsx     # Generated by shadcn/ui CLI
│   │   ├── input.tsx      # Generated by shadcn/ui CLI
│   │   └── ...
│   ├── atoms/             # Custom atomic components
│   │   ├── logo.tsx       # Custom atom (not from shadcn/ui)
│   │   ├── icon-button.tsx # Extended from ui/button
│   │   └── ...
│   ├── molecules/         # Composite components
│   │   ├── search-bar.tsx # Uses ui/input and atoms/icon-button
│   │   ├── user-card.tsx  # Uses ui/card and other components
│   │   └── ...
│   ├── organisms/         # Complex components
│   │   ├── header.tsx     # Uses atoms and molecules
│   │   ├── sidebar.tsx    # Complex navigation component
│   │   └── ...
│   └── templates/         # Page layouts
│       ├── dashboard-layout.tsx
│       └── ...
```

#### Component Classification

When using shadcn/ui with Atomic Design, classify components as follows:

1. **ui/** - Contains all shadcn/ui base components generated by the CLI
2. **atoms/** - Contains:
   - Custom atomic components not available in shadcn/ui
   - Extended shadcn/ui components with additional styling or functionality

3. **molecules/** - Contains:
   - Combinations of atoms and ui components
   - Medium-complexity UI elements like cards, form groups, etc.

4. **organisms/** - Contains:
   - Complex UI sections composed of multiple molecules and atoms
   - Feature-specific components like headers, sidebars, etc.

5. **templates/** - Contains:
   - Page layout templates
   - Reusable layout patterns

#### Naming Conventions

Follow these naming conventions for components:

- **Base shadcn/ui components**: Use the original name (e.g., `Button`, `Input`)
- **Extended components**: Use descriptive prefixes or suffixes (e.g., `PrimaryButton`, `SearchInput`)
- **Custom components**: Use clear, descriptive names that indicate their purpose (e.g., `UserAvatar`, `NotificationCard`)

#### Example: Component Relationships

```tsx
// src/components/ui/button.tsx (shadcn/ui component)
// Generated by shadcn/ui CLI

// src/components/atoms/primary-button.tsx
import { Button } from "@/components/ui/button";

export function PrimaryButton({ children, ...props }) {
  return (
    <Button 
      variant="default" 
      className="rounded-full px-8" 
      {...props}
    >
      {children}
    </Button>
  );
}

// src/components/molecules/action-card.tsx
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { PrimaryButton } from "@/components/atoms/primary-button";

export function ActionCard({ title, description, actionLabel, onAction }) {
  return (
    <Card>
      <CardContent className="pt-6">
        <h3 className="text-lg font-semibold">{title}</h3>
        <p className="text-muted-foreground">{description}</p>
      </CardContent>
      <CardFooter>
        <PrimaryButton onClick={onAction}>{actionLabel}</PrimaryButton>
      </CardFooter>
    </Card>
  );
}
```

## Naming Conventions

1. **Directories and Files**:
   - Use PascalCase for component directories and files: `Button`, `UserProfile`
   - Use kebab-case for utility files: `api-client.ts`, `form-utils.ts`
   - Use camelCase for hook files: `useAuth.ts`, `useForm.ts`

2. **Components**:
   - Use PascalCase for component names: `Button`, `UserProfile`
   - Use PascalCase for component props interfaces: `ButtonProps`, `UserProfileProps`

3. **Functions and Variables**:
   - Use camelCase for functions and variables: `fetchUsers`, `userData`
   - Use PascalCase for types and interfaces: `User`, `AuthResponse`

4. **Constants**:
   - Use UPPER_SNAKE_CASE for constants: `API_URL`, `MAX_RETRIES`

## Import Structure

Follow this order for imports to maintain consistency:

```tsx
// React and Next.js imports
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';

// External library imports
import { useQuery } from '@tanstack/react-query';
import { motion } from 'framer-motion';

// Internal absolute imports (note that src is not included in the import path)
import { Button } from '@/components/atoms';
import { useAuth } from '@/hooks';
import { formatDate } from '@/lib/utils';

// Relative imports
import { validateForm } from './utils';

// Type imports
import type { User } from '@/types';

// CSS imports
import './styles.css';
```

By following this structure, your Next.js project will be organized in a way that promotes maintainability, scalability, and developer productivity. The `src` directory serves as the root for all source code, but it is not included in import paths thanks to the path aliases configured in `tsconfig.json`.

## Configuration Files

### Next.js Configuration

Configure Next.js in the `next.config.js` file:

```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  // The src directory is automatically supported by Next.js
  // No additional configuration is needed for the src directory
  images: {
    domains: ['example.com', 'cdn.example.com'],
  },
  experimental: {
    // Enable experimental features as needed
  },
};

module.exports = nextConfig;
```

### TypeScript Configuration

Configure TypeScript in the `tsconfig.json` file:

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

Note that the `paths` configuration maps `@/*` to `./src/*`, allowing you to use imports like `import { Button } from '@/components/atoms/Button'` without including `src` in the import path. 