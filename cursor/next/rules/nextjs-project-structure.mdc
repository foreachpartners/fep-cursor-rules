---
description: 
globs: 
alwaysApply: false
---
# Next.js Project Structure

This document outlines the recommended project structure for Next.js applications using the App Router, following industry best practices and the atomic design methodology.

## Directory Structure

```
my-next-app/
├── .eslintrc.js           # ESLint configuration
├── .gitignore             # Git ignore file
├── .prettierrc            # Prettier configuration
├── next.config.js         # Next.js configuration
├── package.json           # Project dependencies and scripts
├── tsconfig.json          # TypeScript configuration
├── public/                # Static assets (images, fonts, etc.)
│   ├── favicon.ico
│   ├── images/
│   └── fonts/
├── app/                   # App Router structure
│   ├── (auth)/            # Grouped route for authentication
│   │   ├── login/
│   │   │   └── page.tsx
│   │   ├── register/
│   │   │   └── page.tsx
│   │   └── layout.tsx
│   ├── (dashboard)/       # Grouped route for dashboard
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── api/               # API Routes
│   │   └── [...]
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # UI Components (Atomic Design)
│   ├── atoms/             # Basic building blocks (Button, Input, etc.)
│   ├── molecules/         # Combinations of atoms (Form fields, etc.)
│   ├── organisms/         # Combinations of molecules (Forms, etc.)
│   ├── templates/         # Page layout templates
│   └── index.ts           # Export all components
├── hooks/                 # Custom React hooks
│   ├── use-auth.ts
│   ├── use-form.ts
│   └── index.ts
├── lib/                   # Utility functions and shared code
│   ├── utils.ts
│   ├── constants.ts
│   └── types.ts
├── services/              # API service layer
│   ├── api-client.ts      # Base API client setup
│   ├── endpoints.ts       # API endpoints constants
│   ├── auth-service.ts    # Auth-related API calls
│   ├── user-service.ts    # User-related API calls
│   └── mock/              # Mock data for development
│       ├── auth.json
│       └── users.json
├── store/                 # Zustand state management
│   ├── auth-store.ts
│   ├── user-store.ts
│   └── index.ts
├── styles/                # Component-specific styles (if not using CSS-in-JS)
│   └── tailwind/          # Tailwind custom configurations
│       └── theme.ts
├── tests/                 # Test files
│   ├── __mocks__/         # Test mocks
│   ├── utils/             # Test utilities
│   └── components/        # Component tests
└── .storybook/            # Storybook configuration
    ├── main.js
    └── preview.js
```

## App Router Organization

The App Router follows a file-system based approach to routing:

- `app/page.tsx`: The main entry page of your application
- `app/layout.tsx`: The root layout that wraps all pages
- `app/(group)/`: Route groups allow you to organize routes without affecting the URL structure
- `app/api/`: API routes that run on the server
- `app/[param]/`: Dynamic route segments

### Conventions

1. **Route Groups**: Use parentheses to create route groups that don't affect the URL structure: `(auth)`, `(dashboard)`, etc.
2. **Shared Layouts**: Create shared layouts with `layout.tsx` to avoid UI duplication
3. **Loading States**: Use `loading.tsx` for route segment loading UI
4. **Error Handling**: Use `error.tsx` for error boundaries at the route level
5. **Not Found Pages**: Use `not-found.tsx` for custom 404 pages within route segments

## Component Organization (Atomic Design)

We follow the Atomic Design methodology for organizing components:

### Atoms

The smallest building blocks of the interface:

- Buttons
- Inputs
- Checkboxes
- Labels
- Icons

Example location: `components/atoms/Button/`

### Molecules

Simple groups of UI elements functioning together:

- Form fields (label + input)
- Search bars
- Card headers
- Navigation items

Example location: `components/molecules/FormField/`

### Organisms

Complex UI components composed of molecules and atoms:

- Forms
- Headers
- Footers
- Modal dialogs
- Data tables

Example location: `components/organisms/LoginForm/`

### Templates

Page-level objects that place components into a layout:

- Page layouts
- Grid systems
- Dashboard layouts

Example location: `components/templates/DashboardLayout/`

## Component File Structure

Each component should have its own directory with the following structure:

```
Button/
├── Button.tsx          # Component implementation
├── Button.test.tsx     # Unit tests (optional: can be in tests/ directory)
├── Button.stories.tsx  # Storybook stories
├── index.ts            # Export file
└── types.ts            # TypeScript types (if needed)
```

## Naming Conventions

1. **Directories and Files**:
   - Use PascalCase for component directories and files: `Button`, `UserProfile`
   - Use kebab-case for utility files: `api-client.ts`, `form-utils.ts`
   - Use camelCase for hook files: `useAuth.ts`, `useForm.ts`

2. **Components**:
   - Use PascalCase for component names: `Button`, `UserProfile`
   - Use PascalCase for component props interfaces: `ButtonProps`, `UserProfileProps`

3. **Functions and Variables**:
   - Use camelCase for functions and variables: `fetchUsers`, `userData`
   - Use PascalCase for types and interfaces: `User`, `AuthResponse`

4. **Constants**:
   - Use UPPER_SNAKE_CASE for constants: `API_URL`, `MAX_RETRIES`

## Importing Order

Follow a consistent import order in all files:

1. React and Next.js imports
2. External library imports
3. Internal absolute imports (components, hooks, etc.)
4. Relative imports
5. Type imports
6. CSS/SCSS imports

Example:

```tsx
// React and Next.js imports
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';

// External library imports
import { useQuery } from '@tanstack/react-query';
import { motion } from 'framer-motion';

// Internal absolute imports
import { Button } from '@/components/atoms';
import { useAuth } from '@/hooks';
import { formatDate } from '@/lib/utils';

// Relative imports
import { validateForm } from './utils';

// Type imports
import type { User } from '@/types';

// CSS imports
import './styles.css';
```

By following this structure, your Next.js project will be organized in a way that promotes maintainability, scalability, and developer productivity. 