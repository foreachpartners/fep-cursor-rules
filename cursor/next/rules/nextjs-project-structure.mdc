---
description: "Recommended project structure and file organization for Next.js applications using the App Router"
globs: 
alwaysApply: false
related: ["nextjs-api-service-layer.mdc", "nextjs-typescript.mdc", "nextjs-linting.mdc"]
---
# Next.js Project Structure

This document outlines the recommended project structure and file organization for Next.js applications using the App Router. For API service layer organization, see @nextjs-api-service-layer.mdc. For TypeScript configuration, refer to @nextjs-typescript.mdc. For linting and formatting guidelines, see @nextjs-linting.mdc.

## Directory Structure

```
my-next-app/
├── .eslintrc.js           # ESLint configuration
├── .gitignore             # Git ignore file
├── .prettierrc            # Prettier configuration
├── next.config.js         # Next.js configuration
├── package.json           # Project dependencies and scripts
├── tsconfig.json          # TypeScript configuration
├── public/                # Static assets (images, fonts, etc.)
│   ├── favicon.ico
│   ├── images/
│   └── fonts/
├── app/                   # App Router structure
│   ├── auth/              # Authentication routes
│   │   ├── login/
│   │   │   └── page.tsx
│   │   ├── register/
│   │   │   └── page.tsx
│   │   └── layout.tsx
│   ├── dashboard/         # Dashboard routes
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── api/               # API Routes
│   │   └── [...]
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # UI Components (Atomic Design)
│   ├── atoms/             # Basic building blocks (Button, Input, etc.)
│   ├── molecules/         # Combinations of atoms (Form fields, etc.)
│   ├── organisms/         # Combinations of molecules (Forms, etc.)
│   ├── templates/         # Page layout templates
│   └── index.ts           # Export all components
├── hooks/                 # Custom React hooks
│   ├── use-auth.ts
│   ├── use-form.ts
│   └── index.ts
├── lib/                   # Utility functions and shared code
│   ├── utils.ts
│   ├── constants.ts
│   └── types.ts
├── services/              # API service layer
│   ├── api-client.ts      # Base API client setup
│   ├── endpoints.ts       # API endpoints constants
│   ├── auth-service.ts    # Auth-related API calls
│   ├── user-service.ts    # User-related API calls
│   └── mock/              # Mock data for development
│       ├── auth.json
│       └── users.json
├── store/                 # Zustand state management
│   ├── auth-store.ts
│   ├── user-store.ts
│   └── index.ts
├── styles/                # Component-specific styles (if not using CSS-in-JS)
│   └── tailwind/          # Tailwind custom configurations
│       └── theme.ts
├── tests/                 # Test files
│   ├── __mocks__/         # Test mocks
│   ├── utils/             # Test utilities
│   └── components/        # Component tests
└── .storybook/            # Storybook configuration
    ├── main.js
    └── preview.js
```

## App Router Organization

The App Router follows a file-system based approach to routing:

- `app/page.tsx`: The main entry page of your application
- `app/layout.tsx`: The root layout that wraps all pages
- `app/api/`: API routes that run on the server
- `app/[param]/`: Dynamic route segments

### Route Organization and Naming Conventions

When organizing routes in the App Router, follow these guidelines:

#### Standard Route Structure

Use a clear, hierarchical folder structure that directly maps to your URL paths:

```
app/
  ├── auth/             # URL: /auth
  │   ├── login/        # URL: /auth/login
  │   │   └── page.tsx
  │   ├── register/     # URL: /auth/register
  │   │   └── page.tsx
  │   └── layout.tsx    # Shared layout for auth routes
  ├── dashboard/        # URL: /dashboard
  │   ├── page.tsx
  │   ├── settings/     # URL: /dashboard/settings
  │   │   └── page.tsx
  │   └── layout.tsx    # Shared layout for dashboard routes
  └── page.tsx          # URL: /
```

**Important rules:**
- **Never use parentheses in folder names** - avoid Next.js route groups
- Use descriptive, feature-based folder names
- Create logical hierarchies that match your application's information architecture
- Use shared layouts at appropriate levels of the hierarchy

#### Multiple Layouts

To implement different layouts for different sections of your app:

```
app/
  ├── layout.tsx        # Base layout with minimal shared elements
  ├── auth/
  │   ├── layout.tsx    # Auth-specific layout
  │   ├── login/
  │   │   └── page.tsx
  │   └── register/
  │       └── page.tsx
  ├── dashboard/
  │   ├── layout.tsx    # Dashboard-specific layout
  │   └── page.tsx
  └── page.tsx
```

This approach uses nested layouts instead of route groups to achieve the same result of having different layouts for different sections.

#### Parallel Routes

For complex UI with multiple independent sections, use parallel routes with slots:

```
app/
  ├── layout.tsx        # Layout with slots: @sidebar and @content
  ├── @sidebar/         # Sidebar slot
  │   ├── page.tsx      # Default sidebar
  │   └── settings/
  │       └── page.tsx  # Settings sidebar
  └── @content/         # Main content slot
      ├── page.tsx      # Default content
      └── settings/
          └── page.tsx  # Settings content
```

Note: The `@` symbol is used for slot names in parallel routes and is a valid part of the Next.js routing system. This is the only exception to our "no special characters in folder names" rule.

### File and Folder Naming Conventions

Follow these naming conventions for files and folders in your Next.js application:

1. **Routes and Pages**
   - Use kebab-case for route folders: `user-profile/`, `product-details/`
   - Use standard Next.js file names for special files: `page.tsx`, `layout.tsx`
   - **Never use parentheses or other special characters in folder names** (except for `@` in parallel routes and `[param]` for dynamic routes)

2. **Components**
   - Use PascalCase for component files: `Button.tsx`, `UserProfile.tsx`
   - Use PascalCase for component folders: `Button/`, `UserProfile/`
   - Group related components in feature folders

3. **Utilities and Helpers**
   - Use camelCase for utility files: `formatDate.ts`, `useLocalStorage.ts`
   - Use descriptive, action-based names for utilities

4. **Constants and Types**
   - Use PascalCase for type files: `UserTypes.ts`, `ApiTypes.ts`
   - Use UPPER_SNAKE_CASE for constant values: `API_ENDPOINTS`, `DEFAULT_LOCALE`
   - Use camelCase for constant files: `apiEndpoints.ts`, `routeConstants.ts`

5. **Special Files**
   - Use the standard Next.js file names for special files: `layout.tsx`, `loading.tsx`, `error.tsx`, `not-found.tsx`
   - Use `index.ts` for barrel exports from directories

6. **Test Files**
   - Append `.test.ts` or `.test.tsx` to test files: `Button.test.tsx`
   - Place test files next to the files they test

7. **Storybook Files**
   - Append `.stories.ts` or `.stories.tsx` to Storybook files: `Button.stories.tsx`
   - Place story files next to the components they document

### App Router Special Files

Next.js App Router uses several special files with specific purposes:

| File             | Purpose                                                  |
|------------------|----------------------------------------------------------|
| `page.tsx`       | UI for a route segment, makes the route publicly accessible |
| `layout.tsx`     | Shared UI for a segment and its children                 |
| `loading.tsx`    | Loading UI for a segment and its children                |
| `error.tsx`      | Error UI for a segment and its children                  |
| `not-found.tsx`  | Not found UI for a segment and its children              |
| `route.ts`       | Server-side API endpoint                                 |
| `middleware.ts`  | Request middleware (at the app level)                    |

## Component Organization (Atomic Design)

We follow the Atomic Design methodology for organizing components:

### Atoms

The smallest building blocks of the interface:

- Buttons
- Inputs
- Checkboxes
- Labels
- Icons

Example location: `components/atoms/Button/`

### Molecules

Simple groups of UI elements functioning together:

- Form fields (label + input)
- Search bars
- Card headers
- Navigation items

Example location: `components/molecules/FormField/`

### Organisms

Complex UI components composed of molecules and atoms:

- Forms
- Headers
- Footers
- Modal dialogs
- Data tables

Example location: `components/organisms/LoginForm/`

### Templates

Page-level objects that place components into a layout:

- Page layouts
- Grid systems
- Dashboard layouts

Example location: `components/templates/DashboardLayout/`

## Component File Structure

Each component should have its own directory with the following structure:

```
Button/
├── Button.tsx          # Component implementation
├── Button.test.tsx     # Unit tests (optional: can be in tests/ directory)
├── Button.stories.tsx  # Storybook stories
├── index.ts            # Export file
└── types.ts            # TypeScript types (if needed)
```

## Naming Conventions

1. **Directories and Files**:
   - Use PascalCase for component directories and files: `Button`, `UserProfile`
   - Use kebab-case for utility files: `api-client.ts`, `form-utils.ts`
   - Use camelCase for hook files: `useAuth.ts`, `useForm.ts`

2. **Components**:
   - Use PascalCase for component names: `Button`, `UserProfile`
   - Use PascalCase for component props interfaces: `ButtonProps`, `UserProfileProps`

3. **Functions and Variables**:
   - Use camelCase for functions and variables: `fetchUsers`, `userData`
   - Use PascalCase for types and interfaces: `User`, `AuthResponse`

4. **Constants**:
   - Use UPPER_SNAKE_CASE for constants: `API_URL`, `MAX_RETRIES`

## Importing Order

Follow a consistent import order in all files:

1. React and Next.js imports
2. External library imports
3. Internal absolute imports (components, hooks, etc.)
4. Relative imports
5. Type imports
6. CSS/SCSS imports

Example:

```tsx
// React and Next.js imports
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';

// External library imports
import { useQuery } from '@tanstack/react-query';
import { motion } from 'framer-motion';

// Internal absolute imports
import { Button } from '@/components/atoms';
import { useAuth } from '@/hooks';
import { formatDate } from '@/lib/utils';

// Relative imports
import { validateForm } from './utils';

// Type imports
import type { User } from '@/types';

// CSS imports
import './styles.css';
```

By following this structure, your Next.js project will be organized in a way that promotes maintainability, scalability, and developer productivity.

### File and Folder Naming Conventions

Follow these naming conventions for files and folders in your Next.js application:

1. **Routes and Pages**
   - Use kebab-case for route folders: `user-profile/`, `product-details/`
   - Use PascalCase for page components: `page.tsx`
   - Use descriptive, feature-based names for routes

2. **Components**
   - Use PascalCase for component files: `Button.tsx`, `UserProfile.tsx`
   - Use PascalCase for component folders: `Button/`, `UserProfile/`
   - Group related components in feature folders

3. **Utilities and Helpers**
   - Use camelCase for utility files: `formatDate.ts`, `useLocalStorage.ts`
   - Use descriptive, action-based names for utilities

4. **Constants and Types**
   - Use PascalCase for type files: `UserTypes.ts`, `ApiTypes.ts`
   - Use UPPER_SNAKE_CASE for constant values: `API_ENDPOINTS`, `DEFAULT_LOCALE`
   - Use camelCase for constant files: `apiEndpoints.ts`, `routeConstants.ts`

5. **Special Files**
   - Use the standard Next.js file names for special files: `layout.tsx`, `loading.tsx`, `error.tsx`, `not-found.tsx`
   - Use `index.ts` for barrel exports from directories

6. **Test Files**
   - Append `.test.ts` or `.test.tsx` to test files: `Button.test.tsx`
   - Place test files next to the files they test

7. **Storybook Files**
   - Append `.stories.ts` or `.stories.tsx` to Storybook files: `Button.stories.tsx`
   - Place story files next to the components they document

### App Router Special Files

Next.js App Router uses several special files with specific purposes:

| File             | Purpose                                                  |
|------------------|----------------------------------------------------------|
| `page.tsx`       | UI for a route segment, makes the route publicly accessible |
| `layout.tsx`     | Shared UI for a segment and its children                 |
| `loading.tsx`    | Loading UI for a segment and its children                |
| `error.tsx`      | Error UI for a segment and its children                  |
| `not-found.tsx`  | Not found UI for a segment and its children              |
| `route.ts`       | Server-side API endpoint                                 |
| `middleware.ts`  | Request middleware (at the app level)                    | 