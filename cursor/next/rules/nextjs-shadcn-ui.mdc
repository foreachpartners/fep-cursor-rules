---
description: "Guidelines for using shadcn/ui components in Next.js applications"
globs: 
alwaysApply: false
related: ["nextjs-project-structure.mdc", "nextjs-tailwind-v4.mdc", "nextjs-tailwind-v4-migration.mdc", "nextjs-typescript.mdc"]
---
# Next.js shadcn/ui Guidelines

This document outlines the recommended approach to using shadcn/ui components in Next.js applications. For project structure guidelines, see @nextjs-project-structure.mdc. For Tailwind CSS v4 integration, refer to @nextjs-tailwind-v4.mdc. For migration from Tailwind CSS v3 to v4, see @nextjs-tailwind-v4-migration.mdc.

## Introduction to shadcn/ui

shadcn/ui is not a traditional component library but rather a collection of reusable components that you can copy and paste into your projects. The key difference is that you own the code of these components, allowing for complete customization and control.

### Key Benefits

1. **No Black Box**: The components are directly in your codebase, not hidden behind abstractions
2. **Full Customization**: Easily modify components to match your design system
3. **Accessibility**: Built with accessibility in mind using Radix UI primitives
4. **Modern Styling**: Uses Tailwind CSS for styling
5. **TypeScript Support**: Fully typed components for better developer experience
6. **Framework Agnostic**: Works with various React frameworks, including Next.js

## Setting Up shadcn/ui in a New Project

### For New Projects with Tailwind CSS v4 and React 19

Use the `canary` version of the CLI to initialize a new project:

```bash
# First, create a new Next.js project
pnpm create next-app@canary --tailwind --eslint --typescript --app --no-src-dir my-app
cd my-app

# Initialize shadcn/ui
pnpm dlx shadcn@canary init
```

During initialization, you'll be asked to configure your preferences:

```
Which style would you like to use? › New York
Which color would you like to use as base color? › Zinc
Do you want to use CSS variables for colors? › yes
```

### Adding Components

After initialization, you can add components to your project:

```bash
pnpm dlx shadcn@canary add button
```

This will add the Button component to your project, which you can then import and use:

```tsx
import { Button } from "@/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

## Integrating shadcn/ui in Existing Projects

### For Projects Already Using Tailwind CSS v4

If your project is already using Tailwind CSS v4, you can add shadcn/ui directly:

```bash
pnpm dlx shadcn@canary init
```

### For Projects Using Tailwind CSS v3

If your project is using Tailwind CSS v3, you should first migrate to v4 following the guidelines in @nextjs-tailwind-v4-migration.mdc, then add shadcn/ui.

## Project Structure with shadcn/ui

When using shadcn/ui, components are typically organized as follows:

```
src/
├── components/
│   ├── ui/           # shadcn/ui components
│   │   ├── button.tsx
│   │   ├── dialog.tsx
│   │   └── ...
│   ├── custom/       # Your custom components built with shadcn/ui
│   │   ├── user-card.tsx
│   │   └── ...
│   └── ...
```

## Best Practices

### 1. Component Customization

shadcn/ui components are designed to be customized. Here's how to approach customization:

```tsx
// Customizing the Button component
import { Button } from "@/components/ui/button"

// Extend with additional variants using cva
import { cva } from "class-variance-authority"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        // Original variants...
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        // Custom variant
        custom: "bg-purple-500 text-white hover:bg-purple-600",
      },
      // Other variants...
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

// Use the custom variant
export function CustomButton() {
  return <Button variant="custom">Custom Button</Button>
}
```

### 2. Consistent Theming

Use CSS variables for consistent theming across your application:

```css
/* globals.css */
@import "tailwindcss";

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}
```

### 3. Component Composition

Leverage the composable nature of shadcn/ui components:

```tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

export function UserProfileCard({ user }) {
  return (
    <Card>
      <CardHeader>
        <Avatar>
          <AvatarImage src={user.avatarUrl} alt={user.name} />
          <AvatarFallback>{user.initials}</AvatarFallback>
        </Avatar>
        <CardTitle>{user.name}</CardTitle>
        <CardDescription>{user.role}</CardDescription>
      </CardHeader>
      <CardContent>
        <p>{user.bio}</p>
      </CardContent>
      <CardFooter>
        <Button>View Profile</Button>
      </CardFooter>
    </Card>
  )
}
```

### 4. Using the `size-*` Utility

With Tailwind CSS v4, use the `size-*` utility instead of separate width and height utilities:

```tsx
// Before
<div className="w-10 h-10">...</div>

// After
<div className="size-10">...</div>
```

### 5. Keeping Components Updated

Since shadcn/ui components are copied into your codebase, you need to manually update them when new versions are released:

```bash
# Update a specific component
pnpm dlx shadcn@latest add button --overwrite

# Or update all components (be careful with this if you've made customizations)
pnpm dlx shadcn-custom update
```

## Advanced Usage

### 1. Custom Tailwind Prefix

If you need to use shadcn/ui in a project that already has Tailwind CSS with a custom prefix, you can configure this during initialization:

```bash
pnpm dlx shadcn@canary init
```

When prompted, specify your Tailwind prefix. This will automatically prefix all utility classes in the components:

```tsx
// With prefix "tw-"
<Button className="tw-mt-4 tw-bg-primary">Click me</Button>
```

### 2. Dark Mode Support

shadcn/ui supports dark mode out of the box. To implement dark mode toggling:

```tsx
"use client"

import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
import { Moon, Sun } from "lucide-react"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
    >
      <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
```

### 3. Form Integration

shadcn/ui works well with form libraries like React Hook Form:

```tsx
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"

const formSchema = z.object({
  username: z.string().min(2).max(50),
  email: z.string().email(),
})

export function ProfileForm() {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      email: "",
    },
  })

  function onSubmit(values) {
    console.log(values)
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="username" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input placeholder="email" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

## Migrating from Other Component Libraries

If you're migrating from another component library to shadcn/ui, follow these steps:

1. **Incremental Adoption**: Add shadcn/ui components one by one, replacing existing components gradually
2. **Theme Mapping**: Map your existing theme variables to shadcn/ui's CSS variables
3. **Component Mapping**: Create a mapping between your old components and shadcn/ui components
4. **Testing**: Thoroughly test each component after migration

## Troubleshooting

### Common Issues

1. **Styling Conflicts**: If you encounter styling conflicts, check for:
   - Conflicting CSS variables
   - Tailwind configuration issues
   - Class name collisions

2. **TypeScript Errors**: If you see TypeScript errors:
   - Ensure your TypeScript version is compatible (4.5+)
   - Check for missing type definitions
   - Verify your tsconfig.json paths

3. **Component Not Found**: If components aren't found after adding them:
   - Check the import paths
   - Verify the component was added successfully
   - Check for file system case sensitivity issues

## Recommended Components

Here's a list of recommended shadcn/ui components for common use cases:

1. **Layout Components**:
   - Card
   - Sheet
   - Tabs
   - Resizable

2. **Form Components**:
   - Button
   - Input
   - Select
   - Checkbox
   - RadioGroup
   - Switch
   - Textarea
   - Form

3. **Feedback Components**:
   - Alert
   - Toast (Sonner)
   - Progress
   - Skeleton

4. **Navigation Components**:
   - Pagination
   - Breadcrumb
   - Dropdown Menu
   - Navigation Menu

5. **Display Components**:
   - Avatar
   - Badge
   - Table
   - Calendar
   - Carousel

## Conclusion

shadcn/ui provides a flexible and customizable approach to building UI components in Next.js applications. By following these guidelines, you can effectively integrate shadcn/ui into your projects while maintaining consistency with our development standards.

Remember that shadcn/ui is not a traditional component library but a collection of components that you own and can fully customize to meet your specific requirements. 