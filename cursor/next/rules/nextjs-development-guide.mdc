---
description: "Comprehensive guide for Next.js application development with best practices and recommendations"
globs: 
alwaysApply: true
related: ["nextjs-project-structure.mdc", "nextjs-api-service-layer.mdc", "nextjs-typescript.mdc", "nextjs-testing.mdc", "nextjs-storybook.mdc", "nextjs-internationalization.mdc", "nextjs-linting.mdc", "nextjs-feature-development.mdc", "nextjs-package-management.mdc", "nextjs-tailwind-v4.mdc", "nextjs-shadcn-ui.mdc"]
---

# Next.js Development Guide

This guide serves as a central reference for all Next.js development practices and standards. It provides an overview of the more detailed guidelines available in specific areas.

## Core Guidelines

Next.js is a React framework that enables server-side rendering, static site generation, and other performance optimizations. Our development approach follows these core principles:

1. **Modern JavaScript and TypeScript**: Use TypeScript for type safety
2. **App Router Architecture**: Prefer App Router over Pages Router for new projects
3. **Component-Based Design**: Follow atomic design principles
4. **API Layer Separation**: Maintain clean separation between UI and data layers
5. **Performance First**: Optimize for Core Web Vitals and user experience
6. **Testing Driven Development**: Write tests for critical functionality
7. **Consistent Code Style**: Follow established linting and formatting rules
8. **Type-Safe Constants and Enums**: Avoid string literals in favor of constants, enums, and other type-safe mechanisms
9. **Clean Folder Structure**: Use descriptive folder names without special characters (no parentheses in folder names)
10. **Package Management**: Use pnpm exclusively as the package manager for all projects

## Technology Stack

Our Next.js applications are built with the following technology stack:

- **Next.js 14+**: Utilizing the App Router architecture
- **TypeScript**: For type safety and better developer experience
- **Tailwind CSS v4**: For styling and responsive design
- **shadcn/ui**: For customizable, accessible UI components
- **Zustand**: For state management
- **TanStack Query**: For data fetching and caching
- **next-intl**: For internationalization
- **Jest and React Testing Library**: For testing
- **ESLint and Prettier**: For code quality and formatting

## Key Guidelines

For detailed information, refer to the following specific guidelines:

### 1. Project Structure and Organization (@nextjs-project-structure.mdc)

See [Project Structure Guidelines](@nextjs-project-structure.mdc) for detailed information on:
- Directory organization
- File naming conventions
- Component structure
- Module organization

### 2. API and Data Management (@nextjs-api-service-layer.mdc)

See [API Service Layer Guidelines](@nextjs-api-service-layer.mdc) for detailed information on:
- API client implementation
- Service layer architecture
- Mock data for development
- Integration with TanStack Query

### 3. TypeScript Usage (@nextjs-typescript.mdc)

See [TypeScript Guidelines](@nextjs-typescript.mdc) for detailed information on:
- TypeScript configuration
- Type definitions and interfaces
- Type safety with App Router
- State management with TypeScript
- **Type-Safe Constants and Enums**: Avoid using string literals directly in code. Instead, use constants, enums, union types, and other type-safe mechanisms. See detailed examples in @nextjs-typescript.mdc.

### 4. Testing Strategy (@nextjs-testing.mdc)

See [Testing Guidelines](@nextjs-testing.mdc) for detailed information on:
- Unit testing with Jest
- Component testing
- Integration testing
- Test organization and best practices

### 5. Component Documentation (@nextjs-storybook.mdc)

See [Storybook Guidelines](@nextjs-storybook.mdc) for detailed information on:
- Setting up Storybook
- Component documentation
- Visual testing
- Storybook addons and customization

### 6. Internationalization (@nextjs-internationalization.mdc)

See [Internationalization Guidelines](@nextjs-internationalization.mdc) for detailed information on:
- Setup and configuration of next-intl
- Translation management
- Internationalized routing
- Date and number formatting

### 7. Code Quality (@nextjs-linting.mdc)

See [Linting and Formatting Guidelines](@nextjs-linting.mdc) for detailed information on:
- ESLint configuration
- Prettier setup
- VS Code integration
- Git hooks with Husky

### 8. Feature Development Process (@nextjs-feature-development.mdc)

See [Feature Development Guidelines](@nextjs-feature-development.mdc) for detailed information on:
- Requirements analysis and planning
- Incremental implementation approach
- Post-implementation checklist
- Verification of compliance with development guidelines
- Feature review process
- Continuous improvement

### 9. Package Management (@nextjs-package-management.mdc)

See [Package Management Guidelines](@nextjs-package-management.mdc) for detailed information on:
- Using pnpm as the exclusive package manager
- Project setup and configuration
- Day-to-day usage and best practices
- CI/CD configuration
- Migration from npm or yarn
- Enforcing pnpm usage across the team

### 10. Tailwind CSS v4 (@nextjs-tailwind-v4.mdc)

See [Tailwind CSS v4 Guidelines](@nextjs-tailwind-v4.mdc) for detailed information on:
- Setting up Tailwind CSS v4
- Configuration and customization
- Migration from Tailwind CSS v3
- Best practices for using Tailwind CSS v4
- Integration with Next.js App Router
- Troubleshooting common issues

For a comprehensive step-by-step migration guide from Tailwind CSS v3 to v4, see [Tailwind CSS v4 Migration Guide](@nextjs-tailwind-v4-migration.mdc).

### 11. shadcn/ui Components (@nextjs-shadcn-ui.mdc)

See [shadcn/ui Guidelines](@nextjs-shadcn-ui.mdc) for detailed information on:
- Setting up shadcn/ui in new and existing projects
- Component customization and theming
- Best practices for using shadcn/ui components
- Integration with Tailwind CSS v4
- Advanced usage patterns
- Recommended components for common use cases
