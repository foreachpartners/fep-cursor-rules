---
description: Core guidelines and navigation for Next.js development standards and best practices. Apply this guide when starting a new Next.js project or when making architectural decisions.
globs:
alwaysApply: true
---

# Next.js Rules Guide

This is the primary rule file for Next.js development. It outlines the core principles, priorities, and technology stack, and provides navigation to more specific rule files.

## Technology Stack

1. **Core Framework**:
   - Next.js 14.x (App Router)
   - React 18.x
   - TypeScript 5.x

2. **State Management**:
   - React Context API (default)
   - Redux Toolkit (complex state)
   - React Query (server state)

3. **Styling Solutions**:
   - Tailwind CSS 4.x
   - CSS Modules
   - shadcn/ui component library

4. **Testing Frameworks**:
   - Jest (unit testing)
   - React Testing Library (component testing) 
   - Playwright (E2E testing)

5. **Package Management**:
   - pnpm

6. **Additional Technologies**:
   - Internationalization (next-i18next)
   - Storybook
   - Telegram Mini Apps SDK

## Priority Levels

- **P0 (Critical)**: Must be followed. No exceptions.
- **P1 (Required)**: Must be followed unless there's a justified reason not to.
- **P2 (Essential)**: Strongly recommended but can be adapted.
- **P3 (Recommended)**: Best practices, should consider implementing.

## Core Principles

1. **Developer Experience**: Create maintainable, well-structured code to improve developer productivity.
2. **Performance**: Optimize for Core Web Vitals and fast rendering.
3. **Accessibility**: Follow WCAG guidelines for inclusive applications.
4. **Testing**: Ensure comprehensive test coverage at all levels.
5. **Internationalization**: Design with multilingual support from the beginning.
6. **Type Safety**: Leverage TypeScript for robust type checking and code quality.

## Rules Navigation

### Project Structure and Architecture
- **@2-nextjs-code-structure.mdc**: Directory organization, file naming, and module structure
- **@7-nextjs-dev-experience.mdc**: Development workflow, tooling, and environments

### Frontend Implementation
- **@3-nextjs-type-system.mdc**: TypeScript configuration and type patterns
- **@14-nextjs-type-safety.mdc**: Strict type safety and string literal prohibitions
- **@5-nextjs-ui-styling.mdc**: UI components and styling guidelines
- **@11-nextjs-shadcn-ui.mdc**: shadcn/ui integration and customization
- **@13-nextjs-tailwind-v4.mdc**: Tailwind CSS v4 specific features and patterns

### Specialized Areas
- **@4-nextjs-testing.mdc**: Testing methodology and practices
- **@6-nextjs-api-layer.mdc**: API implementation and data fetching
- **@8-nextjs-i18n.mdc**: Internationalization and localization
- **@9-nextjs-package-management.mdc**: pnpm usage and dependency management
- **@10-nextjs-storybook.mdc**: Component documentation and Storybook integration
- **@12-nextjs-telegram-miniapps.mdc**: Telegram Mini Apps development 