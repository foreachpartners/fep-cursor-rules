---
description: Core guidelines and navigation for Next.js development standards and best practices. Apply this guide when starting a new Next.js project or when making architectural decisions.
globs:
alwaysApply: true
---

# Next.js Rules Guide

This is the primary rule file for Next.js development. It outlines the core principles, priorities, and technology stack, and provides navigation to more specific rule files.

## Technology Stack

1. **Core Framework**:
   - Next.js 14.x (App Router)
   - React 18.x
   - TypeScript 5.x

2. **State Management**:
   - React Context API (default)
   - TanStack Query (server state)
   - Zustand (complex client state)

3. **Styling Solutions**:
   - Tailwind CSS 4.x
   - CSS Modules
   - shadcn/ui component library

4. **Testing**:
   - Jest
   - React Testing Library
   - Testing Library Hooks

5. **Package Management**:
   - pnpm

6. **Additional Technologies**:
   - Internationalization (next-i18next)
   - Telegram Mini Apps SDK

## Priority Levels

- **P0 (Critical)**: Must be followed. No exceptions.
- **P1 (Required)**: Must be followed unless there's a justified reason not to.
- **P2 (Essential)**: Strongly recommended but can be adapted.
- **P3 (Recommended)**: Best practices, should consider implementing.

## Core Principles

1. **Developer Experience**: Create maintainable, well-structured code to improve developer productivity.
2. **Performance**: Optimize for Core Web Vitals and fast rendering.
3. **Type Safety**: Leverage TypeScript for robust type checking and code quality.
4. **Testing**: Ensure comprehensive unit test coverage.
5. **Internationalization**: Design with multilingual support from the beginning.
6. **Code Organization**: Follow consistent patterns for project structure and code organization.

## Rules Navigation

### Project Structure and Architecture
- **@2-nextjs-code-structure.mdc**: Directory organization, file naming, and module structure
- **@7-nextjs-dev-experience.mdc**: Development workflow, tooling, and environments
- **@9-nextjs-package-management.mdc**: pnpm usage and dependency management

### Frontend Implementation
- **@3-nextjs-type-system.mdc**: TypeScript configuration and type patterns
- **@14-nextjs-type-safety.mdc**: Strict type safety and string literal prohibitions
- **@5-nextjs-ui-system.mdc**: UI components, styling, and shadcn/ui integration
- **@13-nextjs-tailwind-v4.mdc**: Tailwind CSS v4 specific features and patterns

### API and Data Layer
- **@6-nextjs-api-server.mdc**: Server-side API implementation
- **@6a-nextjs-api-client.mdc**: Client-side data fetching and state management

### Testing and Performance
- **@7-nextjs-testing.mdc**: Unit testing methodology and practices
- **@8-nextjs-performance.mdc**: Performance optimization guidelines

### Specialized Areas
- **@8-nextjs-i18n.mdc**: Internationalization and localization
- **@12-nextjs-telegram.mdc**: Telegram Mini Apps development 