---
description: Core guidelines and navigation for Next.js development standards and best practices. Apply this guide when starting a new Next.js project or when making architectural decisions.
globs:
alwaysApply: true
---

# Next.js Rules Guide

This is the primary rule file for Next.js development. It outlines the core principles, priorities, and technology stack, and provides navigation to more specific rule files. ALWAYS start here when consulting the rules.

## Technology Stack (P0)

1. **Core Framework**:
   - Next.js 14.x (App Router)
   - React 18.x
   - TypeScript 5.x

2. **State Management**:
   - React Context API (default)
   - TanStack Query (server state)
   - Zustand (complex client state)

3. **Styling Solutions**:
   - Tailwind CSS 4.x
   - CSS Modules
   - shadcn/ui component library

4. **Testing**:
   - Jest
   - React Testing Library
   - Testing Library Hooks

5. **Package Management**:
   - pnpm

6. **Additional Technologies**:
   - Internationalization (next-i18next)
   - Telegram Mini Apps SDK

## Priority Levels (P0)

1. **P0 (Critical)**: Must be followed. No exceptions.
2. **P1 (Required)**: Must be followed unless there's a justified reason not to.
3. **P2 (Essential)**: Strongly recommended but can be adapted.
4. **P3 (Recommended)**: Best practices, should consider implementing.

## Core Principles (P0)

1. **Developer Experience**: Create maintainable, well-structured code to improve developer productivity.
2. **Performance**: Optimize for Core Web Vitals and fast rendering.
3. **Type Safety**: Leverage TypeScript for robust type checking and code quality.
4. **Testing**: Ensure comprehensive unit test coverage.
5. **Internationalization**: Design with multilingual support from the beginning.
6. **Code Organization**: Follow consistent patterns for project structure and code organization.

## Rules Navigation (P0)

When addressing specific needs, MUST consult these rules in the following order:

### 1. Project Foundation
CRITICAL: Start with these rules when setting up or modifying project structure:
- **@2-nextjs-code-structure.mdc**: Project organization, file naming conventions, module architecture, and existing project integration
- **@3-nextjs-type-system.mdc**: TypeScript configuration, type patterns, and best practices
- **@4-nextjs-testing.mdc**: Testing strategy, unit tests, and integration testing guidelines

### 2. UI Development
REQUIRED: Follow these rules for frontend implementation:
- **@5-nextjs-ui-system.mdc**: Component architecture, styling principles, and shadcn/ui usage
- **@6-nextjs-api.mdc**: API design, data fetching, and state management patterns
- **@7-nextjs-dev-experience.mdc**: Developer tooling, workflows, and environment setup

### 3. Advanced Features
ESSENTIAL: Implement these rules for production-ready applications:
- **@8-nextjs-i18n.mdc**: Complete internationalization and localization guide
- **@9-nextjs-package-management.mdc**: Dependency management and pnpm workspace configuration
- **@10-nextjs-storybook.mdc**: Component documentation and visual testing

### 4. Production Optimization
REQUIRED: Apply these rules before deployment:
- **@11-nextjs-performance.mdc**: Performance optimization and Core Web Vitals
- **@12-nextjs-telegram.mdc**: Telegram Mini Apps integration and features
- **@13-nextjs-tailwind-v4.mdc**: Tailwind CSS configuration and utility patterns
- **@14-nextjs-type-safety.mdc**: Advanced type safety and string literal management

## Rule Application Process (P0)

1. ALWAYS start with this guide (@1-nextjs-rules-guide.mdc)
2. Follow the Rules Navigation section to identify relevant rules
3. Apply rules according to their priority levels (P0 â†’ P3)
4. Reference cross-linked rules when mentioned in any rule file
5. Return to this guide when switching development contexts 