---
description: Guidelines for implementing and customizing shadcn/ui components in Next.js applications. Apply when setting up, extending, and maintaining UI components using this library.
globs:
alwaysApply: false
---

# Next.js shadcn/ui Guidelines

## 1. Initial Setup and Installation (P0)

1. CRITICAL: Project initialization:
   ```bash
   # Initialize shadcn/ui in your Next.js project
   npx shadcn-ui@latest init
   ```

2. REQUIRED: Configuration options:
   ```bash
   # Example answers during initialization
   √ Would you like to use TypeScript (recommended)? Yes
   √ Which style would you like to use? » Default
   √ Which color would you like to use as base color? » Slate
   √ Where is your global CSS file? » app/globals.css
   √ Would you like to use CSS variables for colors? Yes
   √ Where is your tailwind.config.js located? » tailwind.config.js
   √ Configure the import alias for components: » @/components
   √ Configure the import alias for utils: » @/lib/utils
   √ Are you using React Server Components? Yes
   ```

3. ESSENTIAL: Directory structure:
   ```
   ├── app/
   │   └── globals.css    # Global styles including shadcn theme
   ├── components/
   │   └── ui/            # shadcn/ui components
   │       ├── button.tsx
   │       ├── card.tsx
   │       └── ...
   ├── lib/
   │   └── utils.ts       # Utility functions
   └── tailwind.config.js # Tailwind with shadcn configuration
   ```

## 2. Component Installation and Usage (P0)

1. CRITICAL: Component installation:
   ```bash
   # Add individual components
   npx shadcn-ui@latest add button
   npx shadcn-ui@latest add card
   npx shadcn-ui@latest add dialog
   
   # Add multiple components at once
   npx shadcn-ui@latest add button card dialog dropdown-menu
   ```

2. REQUIRED: Component usage:
   ```tsx
   // app/page.tsx or any other component
   import { Button } from "@/components/ui/button"
   import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
   
   export default function Page() {
     return (
       <Card>
         <CardHeader>
           <CardTitle>Notification</CardTitle>
           <CardDescription>Your trial ends in 7 days.</CardDescription>
         </CardHeader>
         <CardContent>
           Upgrade to our premium plan to continue enjoying all features.
         </CardContent>
         <CardFooter>
           <Button>Upgrade Now</Button>
         </CardFooter>
       </Card>
     )
   }
   ```

3. ESSENTIAL: Server vs. Client components:
   ```tsx
   // For interactive components in RSC
   "use client"
   
   import { useState } from "react"
   import { Button } from "@/components/ui/button"
   
   export function CounterButton() {
     const [count, setCount] = useState(0)
     
     return (
       <Button onClick={() => setCount(count + 1)}>
         Count: {count}
       </Button>
     )
   }
   ```

## 3. Theme Customization (P0)

1. CRITICAL: Customizing theme colors:
   ```css
   /* app/globals.css */
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   
   @layer base {
     :root {
       --background: 0 0% 100%;
       --foreground: 222.2 84% 4.9%;
       
       --card: 0 0% 100%;
       --card-foreground: 222.2 84% 4.9%;
       
       --popover: 0 0% 100%;
       --popover-foreground: 222.2 84% 4.9%;
       
       --primary: 222.2 47.4% 11.2%;
       --primary-foreground: 210 40% 98%;
       
       --secondary: 210 40% 96.1%;
       --secondary-foreground: 222.2 47.4% 11.2%;
       
       --muted: 210 40% 96.1%;
       --muted-foreground: 215.4 16.3% 46.9%;
       
       --accent: 210 40% 96.1%;
       --accent-foreground: 222.2 47.4% 11.2%;
       
       --destructive: 0 84.2% 60.2%;
       --destructive-foreground: 210 40% 98%;
       
       --border: 214.3 31.8% 91.4%;
       --input: 214.3 31.8% 91.4%;
       --ring: 222.2 84% 4.9%;
       
       --radius: 0.5rem;
     }
   
     .dark {
       --background: 222.2 84% 4.9%;
       --foreground: 210 40% 98%;
       
       --card: 222.2 84% 4.9%;
       --card-foreground: 210 40% 98%;
       
       --popover: 222.2 84% 4.9%;
       --popover-foreground: 210 40% 98%;
       
       --primary: 210 40% 98%;
       --primary-foreground: 222.2 47.4% 11.2%;
       
       --secondary: 217.2 32.6% 17.5%;
       --secondary-foreground: 210 40% 98%;
       
       --muted: 217.2 32.6% 17.5%;
       --muted-foreground: 215 20.2% 65.1%;
       
       --accent: 217.2 32.6% 17.5%;
       --accent-foreground: 210 40% 98%;
       
       --destructive: 0 62.8% 30.6%;
       --destructive-foreground: 210 40% 98%;
       
       --border: 217.2 32.6% 17.5%;
       --input: 217.2 32.6% 17.5%;
       --ring: 212.7 26.8% 83.9%;
     }
   }
   
   @layer base {
     * {
       @apply border-border;
     }
     body {
       @apply bg-background text-foreground;
     }
   }
   ```

2. REQUIRED: Modifying component radius:
   ```css
   /* app/globals.css */
   @layer base {
     :root {
       /* Other variables */
       --radius: 0.25rem; /* Smaller radius for all components */
     }
   }
   ```

3. ESSENTIAL: Applying custom colors:
   ```js
   // tailwind.config.js
   const { fontFamily } = require("tailwindcss/defaultTheme")
   
   /** @type {import('tailwindcss').Config} */
   module.exports = {
     darkMode: ["class"],
     content: [
       './pages/**/*.{ts,tsx}',
       './components/**/*.{ts,tsx}',
       './app/**/*.{ts,tsx}',
     ],
     theme: {
       container: {
         center: true,
         padding: "2rem",
         screens: {
           "2xl": "1400px",
         },
       },
       extend: {
         colors: {
           border: "hsl(var(--border))",
           input: "hsl(var(--input))",
           ring: "hsl(var(--ring))",
           background: "hsl(var(--background))",
           foreground: "hsl(var(--foreground))",
           primary: {
             DEFAULT: "hsl(var(--primary))",
             foreground: "hsl(var(--primary-foreground))",
           },
           secondary: {
             DEFAULT: "hsl(var(--secondary))",
             foreground: "hsl(var(--secondary-foreground))",
           },
           destructive: {
             DEFAULT: "hsl(var(--destructive))",
             foreground: "hsl(var(--destructive-foreground))",
           },
           muted: {
             DEFAULT: "hsl(var(--muted))",
             foreground: "hsl(var(--muted-foreground))",
           },
           accent: {
             DEFAULT: "hsl(var(--accent))",
             foreground: "hsl(var(--accent-foreground))",
           },
           popover: {
             DEFAULT: "hsl(var(--popover))",
             foreground: "hsl(var(--popover-foreground))",
           },
           card: {
             DEFAULT: "hsl(var(--card))",
             foreground: "hsl(var(--card-foreground))",
           },
           // Custom brand colors
           brand: {
             DEFAULT: "hsl(245 100% 60%)",
             muted: "hsl(245 65% 85%)",
             foreground: "hsl(0 0% 100%)",
           },
         },
         borderRadius: {
           lg: "var(--radius)",
           md: "calc(var(--radius) - 2px)",
           sm: "calc(var(--radius) - 4px)",
         },
         fontFamily: {
           sans: ["var(--font-sans)", ...fontFamily.sans],
         },
         keyframes: {
           // Keyframes for animations
         },
         animation: {
           // Animation definitions
         },
       },
     },
     plugins: [require("tailwindcss-animate")],
   }
   ```

## 4. Component Customization (P1)

1. CRITICAL: Extending component variants:
   ```tsx
   // components/ui/button.tsx
   import * as React from "react"
   import { cva } from "class-variance-authority"
   
   const buttonVariants = cva(
     "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
     {
       variants: {
         variant: {
           default: "bg-primary text-primary-foreground hover:bg-primary/90",
           destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
           outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
           secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
           ghost: "hover:bg-accent hover:text-accent-foreground",
           link: "text-primary underline-offset-4 hover:underline",
           // Custom variant
           brand: "bg-brand text-brand-foreground hover:bg-brand/90",
           // Gradient variant
           gradient: "bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700",
         },
         size: {
           default: "h-10 px-4 py-2",
           sm: "h-9 rounded-md px-3",
           lg: "h-11 rounded-md px-8",
           icon: "h-10 w-10",
           // Custom size
           xl: "h-12 rounded-md px-10 text-base",
         },
       },
       defaultVariants: {
         variant: "default",
         size: "default",
       },
     }
   )
   
   // Rest of the button component
   ```

2. REQUIRED: Creating component compositions:
   ```tsx
   // components/ui/card-with-hover.tsx
   "use client"
   
   import { useState } from "react"
   import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
   import { cn } from "@/lib/utils"
   
   interface HoverCardProps extends React.ComponentProps<typeof Card> {
     title: string
     description?: string
     children: React.ReactNode
     footer?: React.ReactNode
   }
   
   export function HoverCard({ title, description, children, footer, className, ...props }: HoverCardProps) {
     const [isHovered, setIsHovered] = useState(false)
     
     return (
       <Card 
         className={cn(
           "transition-all duration-200", 
           isHovered && "shadow-lg scale-[1.01]",
           className
         )}
         onMouseEnter={() => setIsHovered(true)}
         onMouseLeave={() => setIsHovered(false)}
         {...props}
       >
         <CardHeader>
           <CardTitle>{title}</CardTitle>
           {description && <CardDescription>{description}</CardDescription>}
         </CardHeader>
         <CardContent>{children}</CardContent>
         {footer && <CardFooter>{footer}</CardFooter>}
       </Card>
     )
   }
   ```

3. ESSENTIAL: Using utility function for class merging:
   ```tsx
   // lib/utils.ts
   import { type ClassValue, clsx } from "clsx"
   import { twMerge } from "tailwind-merge"
   
   export function cn(...inputs: ClassValue[]) {
     return twMerge(clsx(inputs))
   }
   
   // Usage in components
   import { cn } from "@/lib/utils"
   
   export function Button({ className, ...props }) {
     return (
       <button 
         className={cn(
           "base-styles-here", 
           className
         )} 
         {...props} 
       />
     )
   }
   ```

## 5. Form Components and Validation (P1)

1. CRITICAL: Form setup with React Hook Form:
   ```tsx
   // components/signup-form.tsx
   "use client"
   
   import { zodResolver } from "@hookform/resolvers/zod"
   import { useForm } from "react-hook-form"
   import * as z from "zod"
   
   import { Button } from "@/components/ui/button"
   import {
     Form,
     FormControl,
     FormDescription,
     FormField,
     FormItem,
     FormLabel,
     FormMessage,
   } from "@/components/ui/form"
   import { Input } from "@/components/ui/input"
   
   const formSchema = z.object({
     email: z.string().email({ message: "Invalid email address" }),
     password: z.string().min(8, { message: "Password must be at least 8 characters" }),
   })
   
   export function SignUpForm() {
     const form = useForm<z.infer<typeof formSchema>>({
       resolver: zodResolver(formSchema),
       defaultValues: {
         email: "",
         password: "",
       },
     })
   
     function onSubmit(values: z.infer<typeof formSchema>) {
       // Handle form submission
       console.log(values)
     }
   
     return (
       <Form {...form}>
         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
           <FormField
             control={form.control}
             name="email"
             render={({ field }) => (
               <FormItem>
                 <FormLabel>Email</FormLabel>
                 <FormControl>
                   <Input placeholder="email@example.com" {...field} />
                 </FormControl>
                 <FormDescription>
                   Enter your email address.
                 </FormDescription>
                 <FormMessage />
               </FormItem>
             )}
           />
           <FormField
             control={form.control}
             name="password"
             render={({ field }) => (
               <FormItem>
                 <FormLabel>Password</FormLabel>
                 <FormControl>
                   <Input type="password" {...field} />
                 </FormControl>
                 <FormDescription>
                   Must be at least 8 characters.
                 </FormDescription>
                 <FormMessage />
               </FormItem>
             )}
           />
           <Button type="submit">Submit</Button>
         </form>
       </Form>
     )
   }
   ```

2. REQUIRED: Custom form field components:
   ```tsx
   // components/ui/custom-combobox.tsx
   "use client"
   
   import * as React from "react"
   import { Check, ChevronsUpDown } from "lucide-react"
   
   import { cn } from "@/lib/utils"
   import { Button } from "@/components/ui/button"
   import {
     Command,
     CommandEmpty,
     CommandGroup,
     CommandInput,
     CommandItem,
   } from "@/components/ui/command"
   import {
     Popover,
     PopoverContent,
     PopoverTrigger,
   } from "@/components/ui/popover"
   import { FormControl, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
   
   interface Option {
     value: string
     label: string
   }
   
   interface ComboboxProps {
     options: Option[]
     value?: string
     onChange: (value: string) => void
     placeholder?: string
     label?: string
     error?: string
   }
   
   export function CustomCombobox({ options, value, onChange, placeholder, label, error }: ComboboxProps) {
     const [open, setOpen] = React.useState(false)
   
     return (
       <FormItem className="flex flex-col">
         {label && <FormLabel>{label}</FormLabel>}
         <Popover open={open} onOpenChange={setOpen}>
           <PopoverTrigger asChild>
             <FormControl>
               <Button
                 variant="outline"
                 role="combobox"
                 aria-expanded={open}
                 className="w-full justify-between"
               >
                 {value
                   ? options.find((option) => option.value === value)?.label
                   : placeholder || "Select option..."}
                 <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
               </Button>
             </FormControl>
           </PopoverTrigger>
           <PopoverContent className="w-full p-0">
             <Command>
               <CommandInput placeholder="Search..." />
               <CommandEmpty>No option found.</CommandEmpty>
               <CommandGroup>
                 {options.map((option) => (
                   <CommandItem
                     key={option.value}
                     value={option.value}
                     onSelect={(currentValue) => {
                       onChange(currentValue === value ? "" : currentValue)
                       setOpen(false)
                     }}
                   >
                     <Check
                       className={cn(
                         "mr-2 h-4 w-4",
                         value === option.value ? "opacity-100" : "opacity-0"
                       )}
                     />
                     {option.label}
                   </CommandItem>
                 ))}
               </CommandGroup>
             </Command>
           </PopoverContent>
         </Popover>
         {error && <FormMessage>{error}</FormMessage>}
       </FormItem>
     )
   }
   ```

## 6. Dark Mode Implementation (P1)

1. CRITICAL: Setting up theme provider:
   ```tsx
   // components/theme-provider.tsx
   "use client"
   
   import * as React from "react"
   import { ThemeProvider as NextThemesProvider } from "next-themes"
   import { type ThemeProviderProps } from "next-themes/dist/types"
   
   export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
     return <NextThemesProvider {...props}>{children}</NextThemesProvider>
   }
   ```

2. REQUIRED: Theme toggle button:
   ```tsx
   // components/theme-toggle.tsx
   "use client"
   
   import * as React from "react"
   import { Moon, Sun } from "lucide-react"
   import { useTheme } from "next-themes"
   
   import { Button } from "@/components/ui/button"
   import {
     DropdownMenu,
     DropdownMenuContent,
     DropdownMenuItem,
     DropdownMenuTrigger,
   } from "@/components/ui/dropdown-menu"
   
   export function ThemeToggle() {
     const { setTheme } = useTheme()
   
     return (
       <DropdownMenu>
         <DropdownMenuTrigger asChild>
           <Button variant="outline" size="icon">
             <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
             <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
             <span className="sr-only">Toggle theme</span>
           </Button>
         </DropdownMenuTrigger>
         <DropdownMenuContent align="end">
           <DropdownMenuItem onClick={() => setTheme("light")}>
             Light
           </DropdownMenuItem>
           <DropdownMenuItem onClick={() => setTheme("dark")}>
             Dark
           </DropdownMenuItem>
           <DropdownMenuItem onClick={() => setTheme("system")}>
             System
           </DropdownMenuItem>
         </DropdownMenuContent>
       </DropdownMenu>
     )
   }
   ```

3. ESSENTIAL: Implementation in layout:
   ```tsx
   // app/layout.tsx
   import { ThemeProvider } from "@/components/theme-provider"
   import { ThemeToggle } from "@/components/theme-toggle"
   
   export default function RootLayout({
     children,
   }: {
     children: React.ReactNode
   }) {
     return (
       <html lang="en" suppressHydrationWarning>
         <body>
           <ThemeProvider
             attribute="class"
             defaultTheme="system"
             enableSystem
           >
             <header>
               {/* Other header elements */}
               <ThemeToggle />
             </header>
             {children}
           </ThemeProvider>
         </body>
       </html>
     )
   }
   ```

## 7. Animation and Transitions (P2)

1. REQUIRED: Adding animations:
   ```tsx
   // components/ui/animated-card.tsx
   "use client"
   
   import { useEffect, useState } from "react"
   import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
   import { cn } from "@/lib/utils"
   
   interface AnimatedCardProps extends React.ComponentProps<typeof Card> {
     delay?: number
     children: React.ReactNode
     title?: string
   }
   
   export function AnimatedCard({ delay = 0, children, title, className, ...props }: AnimatedCardProps) {
     const [isVisible, setIsVisible] = useState(false)
     
     useEffect(() => {
       const timer = setTimeout(() => {
         setIsVisible(true)
       }, delay)
       
       return () => clearTimeout(timer)
     }, [delay])
     
     return (
       <Card 
         className={cn(
           "transition-all duration-700",
           isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4",
           className
         )}
         {...props}
       >
         {title && (
           <CardHeader>
             <CardTitle>{title}</CardTitle>
           </CardHeader>
         )}
         <CardContent>{children}</CardContent>
       </Card>
     )
   }
   ```

2. RECOMMENDED: Using motion component:
   ```tsx
   // components/ui/motion-card.tsx
   "use client"
   
   import { motion } from "framer-motion"
   import { Card, CardProps } from "@/components/ui/card"
   import { cn } from "@/lib/utils"
   
   interface MotionCardProps extends CardProps {
     variants?: {
       hidden: object
       visible: object
     }
     initial?: string
     animate?: string
     transition?: object
   }
   
   const defaultVariants = {
     hidden: { opacity: 0, y: 20 },
     visible: { opacity: 1, y: 0 },
   }
   
   const MotionCard = motion(Card)
   
   export function AnimatedCard({
     variants = defaultVariants,
     initial = "hidden",
     animate = "visible",
     transition = { duration: 0.5 },
     className,
     ...props
   }: MotionCardProps) {
     return (
       <MotionCard
         variants={variants}
         initial={initial}
         animate={animate}
         transition={transition}
         className={cn(className)}
         {...props}
       />
     )
   }
   ```

## 8. Component Code Generation (P2)

1. REQUIRED: Component generation command:
   ```bash
   # Generate new components based on shadcn/ui patterns
   npx shadcn-ui@latest add [component-name]
   
   # Create a new custom component
   npx shadcn-ui@latest add button --cwd ./path/to/project --name custom-button
   ```

2. RECOMMENDED: Component template:
   ```tsx
   // Template for new custom components
   
   "use client"
   
   import * as React from "react"
   import { cva, type VariantProps } from "class-variance-authority"
   
   import { cn } from "@/lib/utils"
   
   const customComponentVariants = cva(
     "base-styles-here", 
     {
       variants: {
         variant: {
           default: "default-styles",
           secondary: "secondary-styles",
           // Add more variants
         },
         size: {
           default: "default-size",
           sm: "sm-size",
           lg: "lg-size",
         },
       },
       defaultVariants: {
         variant: "default",
         size: "default",
       },
     }
   )
   
   export interface CustomComponentProps
     extends React.HTMLAttributes<HTMLDivElement>,
       VariantProps<typeof customComponentVariants> {}
   
   const CustomComponent = React.forwardRef<HTMLDivElement, CustomComponentProps>(
     ({ className, variant, size, ...props }, ref) => {
       return (
         <div
           className={cn(customComponentVariants({ variant, size, className }))}
           ref={ref}
           {...props}
         />
       )
     }
   )
   CustomComponent.displayName = "CustomComponent"
   
   export { CustomComponent, customComponentVariants }
   ``` 