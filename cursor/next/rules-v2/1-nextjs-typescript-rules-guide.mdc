---
description: Core guidelines for Next.js and TypeScript development with best practices and recommendations
globs:
alwaysApply: true
---

# Next.js and TypeScript Development Guide

This guide serves as a central reference for Next.js and TypeScript development practices and standards. It provides an overview of the more detailed guidelines available in specific areas.

## 1. Priority Levels (P0)

1. **P0** - Must implement (critical requirements)
2. **P1** - Should implement (high importance)
3. **P2** - Recommended (medium importance)
4. **P3** - Consider when possible (lower importance)

## 2. Core Principles (P0)

1. **TypeScript-First Development**: Use TypeScript for type safety across the entire codebase
2. **App Router Architecture**: Prefer App Router over Pages Router for new projects
3. **Component-Based Design**: Follow atomic design principles for component organization
4. **API Layer Separation**: Maintain clean separation between UI and data layers
5. **Performance Optimization**: Optimize for Core Web Vitals and user experience
6. **Test-Driven Development**: Write tests for critical functionality
7. **Consistent Code Style**: Follow established linting and formatting rules
8. **Type-Safe Constants**: Avoid string literals in favor of constants, enums, and type-safe mechanisms
9. **Clean Folder Structure**: Use descriptive folder names without special characters (no parentheses in folder names)
10. **Package Management**: Use pnpm exclusively as the package manager for all projects

## 3. Technology Stack (P1)

Our Next.js applications are built with the following technology stack:

- **Next.js 14+**: Utilizing the App Router architecture
- **TypeScript**: For type safety and better developer experience
- **Tailwind CSS v4**: For styling and responsive design
- **shadcn/ui**: For customizable, accessible UI components
- **Zustand**: For state management
- **TanStack Query**: For data fetching and caching
- **next-intl**: For internationalization
- **Jest and React Testing Library**: For testing
- **ESLint and Prettier**: For code quality and formatting

## 4. Rule Navigation (P0)

When implementing features or solving specific tasks, refer to these detailed rule documents:

### 4.1. Project Structure and Organization

See **@5-nextjs-typescript-project-structure.mdc** for:
- Directory organization
- File naming conventions
- Component structure
- Module organization
- App Router organization

### 4.2. TypeScript Configuration and Usage

See **@6-nextjs-typescript-usage.mdc** for:
- TypeScript configuration
- Type definitions and interfaces
- Type safety with App Router
- State management with TypeScript
- Advanced TypeScript patterns

### 4.3. API and Data Management

See **@3-nextjs-typescript-api-service-layer.mdc** for:
- API client implementation
- Service layer architecture
- Mock data for development
- Integration with TanStack Query
- Type-safe API calls

### 4.4. Component Development

See **@2-nextjs-typescript-components.mdc** for:
- Component organization
- Props typing
- shadcn/ui integration
- Atomic design implementation
- Component best practices

### 4.5. Testing Strategy

See **@nextjs-typescript-testing.mdc** for:
- Unit testing with Jest
- Component testing
- Integration testing
- Test organization
- Test typing

### 4.6. Styling and UI

See **@nextjs-typescript-styling.mdc** for:
- Tailwind CSS v4 setup and usage
- shadcn/ui customization
- Theme configuration
- Responsive design
- Dark mode implementation

### 4.7. Internationalization

See **@nextjs-typescript-internationalization.mdc** for:
- next-intl setup and configuration
- Translation management
- Internationalized routing
- Type-safe translations

### 4.8. Code Quality and Linting

See **@nextjs-typescript-linting.mdc** for:
- ESLint configuration
- Prettier setup
- TypeScript-specific rules
- VS Code integration
- Git hooks with Husky

### 4.9. State Management

See **@nextjs-typescript-state-management.mdc** for:
- Zustand store setup
- Type-safe state management
- React hooks for state
- Server and client state separation

### 4.10. Development Workflow

See **@nextjs-typescript-workflow.mdc** for:
- Feature development process
- Incremental implementation approach
- Package management with pnpm
- Code review guidelines
- Documentation

## 5. Cross-Cutting Concerns (P1)

Across all aspects of development, maintain these cross-cutting concerns:

1. **Type Safety**: Ensure complete type coverage across the application
2. **Accessibility**: Follow WCAG guidelines for accessible applications
3. **Performance**: Optimize for loading, interactivity, and visual stability
4. **Security**: Implement security best practices to prevent vulnerabilities
5. **Maintainability**: Write clean, well-documented, and testable code

## 6. Guidelines for LLM Agent (P0)

When performing tasks, follow these instructions to determine which document to reference:

1. **Creating a new project**: Start with @nextjs-typescript-project-structure.mdc, then @nextjs-typescript-usage.mdc, and @nextjs-typescript-styling.mdc

2. **Adding features to existing project**: First check @nextjs-typescript-workflow.mdc, then refer to specific guidelines based on the feature type

3. **Working with components**: 
   - UI components: @nextjs-typescript-components.mdc
   - Component testing: @nextjs-typescript-testing.mdc
   - Component styling: @nextjs-typescript-styling.mdc

4. **API and data fetching**: @nextjs-typescript-api-service-layer.mdc

5. **State management**: @nextjs-typescript-state-management.mdc

6. **Internationalization**: @nextjs-typescript-internationalization.mdc

7. **Code quality and linting**: @nextjs-typescript-linting.mdc

Always prioritize type safety (@nextjs-typescript-usage.mdc) and project structure (@nextjs-typescript-project-structure.mdc) across all tasks. 