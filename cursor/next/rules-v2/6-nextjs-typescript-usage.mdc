---
description: "Guidelines for using TypeScript in Next.js applications to ensure type safety"
---

# Next.js TypeScript Usage

This document provides guidelines for using TypeScript in Next.js applications to ensure type safety throughout the codebase. For project structure recommendations, see @5-nextjs-typescript-project-structure.mdc. For component development, refer to @2-nextjs-typescript-components.mdc. For API service layer organization, see @3-nextjs-typescript-api-service-layer.mdc.

## 1. TypeScript Configuration (P0)

### 1.1 Base Configuration

Every Next.js project should have a well-configured `tsconfig.json`:

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

### 1.2 Key TypeScript Compiler Options (P0)

- `strict: true`: Enables all strict type-checking options 
- `noEmit: true`: Prevents TypeScript from emitting JavaScript files (Next.js handles this)
- `jsx: "preserve"`: Preserves JSX for Next.js to transform
- `paths`: Configures path aliases for easier imports
- `incremental: true`: Speeds up compilation by reusing previous output
- `moduleResolution: "bundler"`: Optimized for bundlers like Next.js

### 1.3 Type Declarations (P1)

Create a custom declarations file for third-party libraries without types:

```typescript
// types.d.ts
declare module 'untyped-module' {
  export function doSomething(param: string): void;
  
  export interface SomeInterface {
    id: string;
    name: string;
  }
  
  const defaultExport: {
    version: string;
  };
  
  export default defaultExport;
}
```

## 2. Type Definitions (P0)

### 2.1 Common Type Definitions (P0)

Create a central place for common types:

```typescript
// lib/types.ts
export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
}

export type UserRole = 'admin' | 'user' | 'guest';

export interface Pagination {
  page: number;
  limit: number;
  total: number;
}

export interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
}

export type ApiErrorResponse = {
  message: string;
  errors?: Record<string, string[]>;
  status: number;
};
```

### 2.2 Type-Safe Constants and Enums (P0)

Use TypeScript to create type-safe constants and enums:

```typescript
// lib/constants.ts
export const enum HttpMethod {
  GET = 'GET',
  POST = 'POST',
  PUT = 'PUT',
  DELETE = 'DELETE',
  PATCH = 'PATCH'
}

export const enum ApiStatus {
  SUCCESS = 'success',
  ERROR = 'error'
}

export const API_ROUTES = {
  AUTH: {
    LOGIN: '/api/auth/login',
    REGISTER: '/api/auth/register',
    LOGOUT: '/api/auth/logout',
  },
  USERS: {
    LIST: '/api/users',
    DETAILS: (id: string) => `/api/users/${id}`,
  }
} as const;

// Type-safe route keys
export type ApiRouteKey = keyof typeof API_ROUTES;
```

### 2.3 Component Props (P0)

Define props using TypeScript interfaces:

```typescript
// components/Button/Button.tsx
import React from 'react';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
  fullWidth?: boolean;
}

export const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  loading = false,
  fullWidth = false,
  className = '',
  ...props
}) => {
  // Component implementation
  return <button {...props}>{children}</button>;
};
```

### 2.4 Function Types (P1)

Properly type functions, especially those used across the application:

```typescript
// lib/utils.ts
export type SortDirection = 'asc' | 'desc';

export interface SortConfig<T> {
  key: keyof T;
  direction: SortDirection;
}

export function sortItems<T>(items: T[], config: SortConfig<T>): T[] {
  return [...items].sort((a, b) => {
    if (a[config.key] < b[config.key]) {
      return config.direction === 'asc' ? -1 : 1;
    }
    if (a[config.key] > b[config.key]) {
      return config.direction === 'asc' ? 1 : -1;
    }
    return 0;
  });
}

export type FilterFunction<T> = (item: T) => boolean;

export function filterItems<T>(items: T[], filterFn: FilterFunction<T>): T[] {
  return items.filter(filterFn);
}
```

## 3. Type Safety with App Router (P0)

### 3.1 Page Props and Params (P0)

Type your page components and their parameters:

```typescript
// app/users/[id]/page.tsx
import { User } from '@/lib/types';

export interface UserPageProps {
  params: {
    id: string;
  };
  searchParams: {
    tab?: string;
  };
}

export default async function UserPage({ params, searchParams }: UserPageProps) {
  // Implementation
}
```

### 3.2 Route Handlers (P0)

Type your API route handlers:

```typescript
// app/api/users/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { User } from '@/lib/types';

export async function GET(request: NextRequest) {
  const users: User[] = []; // Get from database
  
  return NextResponse.json({ users });
}

export async function POST(request: NextRequest) {
  const userData: Partial<User> = await request.json();
  
  // Validate and save to database
  
  return NextResponse.json({ message: 'User created' });
}
```

### 3.3 Middleware (P1)

Type your middleware functions:

```typescript
// middleware.ts
import { NextRequest, NextResponse } from 'next/server';

export function middleware(request: NextRequest) {
  const token = request.cookies.get('token')?.value;
  
  if (!token && request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.redirect(new URL('/auth/login', request.url));
  }
  
  return NextResponse.next();
}

export const config = {
  matcher: ['/dashboard/:path*', '/api/:path*'],
};
```

## 4. Advanced TypeScript Patterns (P1)

### 4.1 Type Guards (P1)

Use type guards to narrow types:

```typescript
// Type guard for User type
function isUser(value: any): value is User {
  return (
    value &&
    typeof value === 'object' &&
    typeof value.id === 'string' &&
    typeof value.name === 'string' &&
    typeof value.email === 'string'
  );
}

// Usage
function processEntity(entity: User | Product) {
  if (isUser(entity)) {
    // TypeScript knows entity is User
    console.log(entity.email);
  } else {
    // TypeScript knows entity is Product
    console.log(entity.price);
  }
}
```

### 4.2 Discriminated Unions (P1)

Use discriminated unions for complex state or UI components:

```typescript
// Different states for an async operation
type AsyncState<T> =
  | { status: 'idle' }
  | { status: 'loading' }
  | { status: 'success'; data: T }
  | { status: 'error'; error: Error };

// Usage
function UserProfile({ id }: { id: string }) {
  const [state, setState] = useState<AsyncState<User>>({ status: 'idle' });
  
  useEffect(() => {
    setState({ status: 'loading' });
    
    fetchUser(id)
      .then(user => setState({ status: 'success', data: user }))
      .catch(error => setState({ status: 'error', error }));
  }, [id]);
  
  // Render based on state
  if (state.status === 'loading') return <Spinner />;
  if (state.status === 'error') return <ErrorMessage error={state.error} />;
  if (state.status === 'success') return <UserDetails user={state.data} />;
  
  return null;
}
```

### 4.3 Utility Types (P2)

Use TypeScript utility types to transform existing types:

```typescript
// Original type
interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  createdAt: Date;
  updatedAt: Date;
}

// User creation input (omits auto-generated fields)
type CreateUserInput = Omit<User, 'id' | 'createdAt' | 'updatedAt'>;

// User update input (makes all fields optional except id)
type UpdateUserInput = Partial<Omit<User, 'id'>> & { id: string };

// Public user (excludes sensitive data)
type PublicUser = Pick<User, 'id' | 'name' | 'email'>;

// Read-only user object
type ReadonlyUser = Readonly<User>;
```

## 5. TypeScript Best Practices (P0)

### 5.1 Use Strict Null Checking (P0)

Always handle null and undefined properly:

```typescript
// ❌ Bad - might cause runtime errors
function getUserName(user: User | null) {
  return user.name; // Error: Object is possibly null
}

// ✅ Good - proper null checking
function getUserName(user: User | null) {
  return user ? user.name : 'Guest';
}
```

### 5.2 Avoid Type Assertions When Possible (P1)

```typescript
// ❌ Bad - bypasses type checking
const user = someValue as User;

// ✅ Good - uses type guard
if (isUser(someValue)) {
  const user = someValue; // TypeScript knows it's User
}
```

### 5.3 Use Generics for Reusable Components (P1)

```typescript
// Generic data fetching hook
function useData<T>(url: string): {
  data: T | null;
  loading: boolean;
  error: Error | null;
} {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);
  
  useEffect(() => {
    // Implementation
  }, [url]);
  
  return { data, loading, error };
}

// Usage
const { data: user } = useData<User>('/api/users/1');
```

### 5.4 Prefer Interfaces for Object Types (P2)

```typescript
// ✅ Good - Use interfaces for object types that can be extended
interface User {
  id: string;
  name: string;
}

// ✅ Good - Use type aliases for unions, primitives, etc.
type UserRole = 'admin' | 'user' | 'guest';
```

### 5.5 Use Unknown Instead of Any (P1)

```typescript
// ❌ Bad - no type safety
function processData(data: any) {
  return data.length; // No error, but might fail at runtime
}

// ✅ Good - forces type checking
function processData(data: unknown) {
  if (Array.isArray(data)) {
    return data.length; // Safe to access length
  }
  return 0;
}
```

## 6. Setup For TypeScript Newcomers (P3)

### 6.1 TypeScript References

```typescript
// Useful TypeScript references in comments
// 1. TypeScript Handbook: https://www.typescriptlang.org/docs/handbook/intro.html
// 2. Next.js TypeScript Docs: https://nextjs.org/docs/basic-features/typescript
// 3. React TypeScript Cheatsheet: https://react-typescript-cheatsheet.netlify.app/
```

### 6.2 VS Code Extension Recommendations (P3)

```json
// .vscode/extensions.json
{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-typescript-next"
  ]
}
```