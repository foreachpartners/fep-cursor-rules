---
description: Guidelines for UI components, styling, and theming in Next.js applications.
globs:
alwaysApply: false
---

# Next.js UI Guidelines

## 1. Component Architecture (P0)

1. CRITICAL: Structure:
   ```
   components/
   ├── ui/         # Base components
   ├── layout/     # Layout components
   ├── features/   # Feature components
   └── providers/  # Context providers
   ```

2. REQUIRED: Base component template:
   ```typescript
   // components/ui/button.tsx
   import { forwardRef } from "react"
   import { cn } from "@/lib/utils"
   
   interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
     variant?: "primary" | "secondary" | "outline"
     size?: "sm" | "md" | "lg"
     isLoading?: boolean
   }
   
   const Button = forwardRef<HTMLButtonElement, ButtonProps>(
     ({ className, children, variant = "primary", size = "md", isLoading, ...props }, ref) => (
       <button
         className={cn(
           "inline-flex items-center justify-center rounded-md font-medium",
           {
             "bg-primary text-primary-foreground": variant === "primary",
             "bg-secondary text-secondary-foreground": variant === "secondary",
             "border border-input bg-transparent": variant === "outline",
             "h-9 px-3": size === "sm",
             "h-10 px-4": size === "md",
             "h-11 px-8": size === "lg",
           },
           className
         )}
         ref={ref}
         {...props}
       >
         {isLoading && <span className="animate-spin mr-2">&#8635;</span>}
         {children}
       </button>
     )
   )
   ```

## 2. Form Components (P0)

1. CRITICAL: Input and Select base:
   ```typescript
   // components/ui/form.tsx
   interface FormItemProps {
     label?: string
     required?: boolean
     error?: string
   }
   
   const FormItem = ({ label, required, error, children }: FormItemProps) => (
     <div className="space-y-2">
       {label && (
         <label className="text-sm font-medium">
           {label} {required && <span className="text-red-500">*</span>}
         </label>
       )}
       {children}
       {error && <p className="text-sm text-red-500">{error}</p>}
     </div>
   )
   ```

## 3. Styling Configuration (P0)

1. CRITICAL: Tailwind setup:
   ```javascript
   // tailwind.config.ts
   const config = {
     darkMode: 'class',
     content: ['./app/**/*.{ts,tsx}'],
     theme: {
       extend: {
         colors: {
           border: 'hsl(var(--border))',
           input: 'hsl(var(--input))',
           background: 'hsl(var(--background))',
           foreground: 'hsl(var(--foreground))',
           primary: {
             DEFAULT: 'hsl(var(--primary))',
             foreground: 'hsl(var(--primary-foreground))',
           },
         },
       },
     },
     plugins: [require('tailwindcss-animate')],
   }
   ```

2. REQUIRED: CSS variables:
   ```css
   /* globals.css */
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   
   @layer base {
     :root {
       --background: 0 0% 100%;
       --foreground: 222.2 84% 4.9%;
       --primary: 222.2 47.4% 11.2%;
       --primary-foreground: 210 40% 98%;
     }
   
     .dark {
       --background: 222.2 84% 4.9%;
       --foreground: 210 40% 98%;
       --primary: 210 40% 98%;
       --primary-foreground: 222.2 47.4% 11.2%;
     }
   }
   ```

## 4. Theme System (P1)

1. CRITICAL: Theme provider:
   ```typescript
   // providers/theme.tsx
   "use client"
   
   type Theme = "dark" | "light" | "system"
   
   export function ThemeProvider({
     children,
     defaultTheme = "system",
   }: {
     children: React.ReactNode
     defaultTheme?: Theme
   }) {
     const [theme, setTheme] = useState<Theme>(defaultTheme)
   
     useEffect(() => {
       const root = document.documentElement
       root.classList.remove("light", "dark")
       
       if (theme === "system") {
         const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
         root.classList.add(systemTheme ? "dark" : "light")
         return
       }
       
       root.classList.add(theme)
     }, [theme])
   
     return (
       <ThemeContext.Provider value={{ theme, setTheme }}>
         {children}
       </ThemeContext.Provider>
     )
   }
   ```

## 5. Responsive Design (P1)

1. CRITICAL: Mobile-first approach:
   ```typescript
   // Example usage
   <div className="
     grid grid-cols-1
     sm:grid-cols-2 
     md:grid-cols-3
     lg:grid-cols-4
     gap-4
   ">
     {items.map(item => <Card key={item.id} {...item} />)}
   </div>
   ```

2. REQUIRED: Breakpoints:
   - sm: 640px
   - md: 768px
   - lg: 1024px
   - xl: 1280px
   - 2xl: 1536px 