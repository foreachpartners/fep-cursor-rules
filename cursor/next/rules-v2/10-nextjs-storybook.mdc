---
description: Guidelines for implementing and using Storybook with Next.js applications. Apply when creating, organizing, and documenting UI components.
globs:
alwaysApply: false
---

# Next.js Storybook Guidelines

## 1. Storybook Setup and Configuration (P0)

1. CRITICAL: Initial installation:
   ```bash
   # Add Storybook to existing Next.js project
   npx storybook@latest init
   
   # Start Storybook development server
   npm run storybook
   ```

2. REQUIRED: Main configuration:
   ```js
   // .storybook/main.js
   /** @type { import('@storybook/nextjs').StorybookConfig } */
   const config = {
     stories: [
       '../stories/**/*.mdx',
       '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)',
       '../components/**/*.stories.@(js|jsx|mjs|ts|tsx)'
     ],
     addons: [
       '@storybook/addon-links',
       '@storybook/addon-essentials',
       '@storybook/addon-onboarding',
       '@storybook/addon-interactions',
       '@storybook/addon-a11y'
     ],
     framework: {
       name: '@storybook/nextjs',
       options: {},
     },
     docs: {
       autodocs: 'tag',
     },
   };
   export default config;
   ```

3. ESSENTIAL: Preview configuration:
   ```js
   // .storybook/preview.js
   import '../app/globals.css';
   
   /** @type { import('@storybook/react').Preview } */
   const preview = {
     parameters: {
       actions: { argTypesRegex: '^on[A-Z].*' },
       controls: {
         matchers: {
           color: /(background|color)$/i,
           date: /Date$/,
         },
       },
       layout: 'centered',
     },
   };
   
   export default preview;
   ```

## 2. Story Organization (P0)

1. CRITICAL: Story location and naming:
   ```
   # Co-located with components (recommended)
   components/
   ├── Button/
   │   ├── Button.tsx
   │   ├── Button.stories.tsx
   │   └── index.ts
   └── Card/
       ├── Card.tsx
       ├── Card.stories.tsx
       └── index.ts
   
   # Centralized in stories directory (alternative)
   stories/
   ├── components/
   │   ├── Button.stories.tsx
   │   └── Card.stories.tsx
   └── pages/
       └── Login.stories.tsx
   ```

2. REQUIRED: Story structure:
   ```tsx
   // Button.stories.tsx
   import type { Meta, StoryObj } from '@storybook/react';
   import { Button } from './Button';
   
   const meta = {
     title: 'UI/Button',
     component: Button,
     parameters: {
       layout: 'centered',
     },
     tags: ['autodocs'],
     argTypes: {
       variant: { 
         control: 'select', 
         options: ['primary', 'secondary', 'outline'] 
       },
       size: { 
         control: 'radio', 
         options: ['sm', 'md', 'lg'] 
       },
     },
   } satisfies Meta<typeof Button>;
   
   export default meta;
   type Story = StoryObj<typeof meta>;
   
   export const Primary: Story = {
     args: {
       variant: 'primary',
       children: 'Button',
     },
   };
   
   export const Secondary: Story = {
     args: {
       variant: 'secondary',
       children: 'Button',
     },
   };
   
   export const Large: Story = {
     args: {
       size: 'lg',
       children: 'Button',
     },
   };
   
   export const Small: Story = {
     args: {
       size: 'sm',
       children: 'Button',
     },
   };
   ```

3. ESSENTIAL: Component composition:
   ```tsx
   // CardWithButton.stories.tsx
   import type { Meta, StoryObj } from '@storybook/react';
   import { Card } from '../Card/Card';
   import { Button } from '../Button/Button';
   
   const CardWithButton = () => (
     <Card>
       <Card.Header>Card Title</Card.Header>
       <Card.Body>Card content goes here</Card.Body>
       <Card.Footer>
         <Button variant="primary">Action</Button>
       </Card.Footer>
     </Card>
   );
   
   const meta = {
     title: 'Compositions/CardWithButton',
     component: CardWithButton,
   } satisfies Meta<typeof CardWithButton>;
   
   export default meta;
   type Story = StoryObj<typeof meta>;
   
   export const Default: Story = {};
   ```

## 3. Component Documentation (P1)

1. CRITICAL: JSDoc comments:
   ```tsx
   // Button.tsx
   
   export interface ButtonProps {
     /**
      * Button variant affects background, border and text color
      * @default 'primary'
      */
     variant?: 'primary' | 'secondary' | 'outline';
     
     /**
      * Button size affects padding, font size, and border radius
      * @default 'md'
      */
     size?: 'sm' | 'md' | 'lg';
     
     /**
      * Button contents - text or other elements
      */
     children: React.ReactNode;
     
     /**
      * Optional click handler
      */
     onClick?: () => void;
     
     /**
      * Disables the button when true
      * @default false
      */
     disabled?: boolean;
   }
   
   /**
    * Primary UI component for user interaction
    */
   export const Button = ({
     variant = 'primary',
     size = 'md',
     children,
     onClick,
     disabled = false,
   }: ButtonProps) => {
     // Component implementation
   };
   ```

2. REQUIRED: MDX documentation:
   ```mdx
   <!-- Button.mdx -->
   import { Meta, Controls, Story } from '@storybook/blocks';
   import * as ButtonStories from './Button.stories';
   
   <Meta of={ButtonStories} />
   
   # Button Component
   
   The Button component is used to trigger an action or event.
   
   ## Features
   
   - Multiple variants (primary, secondary, outline)
   - Different sizes (sm, md, lg)
   - Support for disabled state
   
   ## Usage
   
   ```tsx
   import { Button } from '@/components/Button';
   
   export default function MyComponent() {
     return (
       <Button variant="primary" size="md" onClick={() => alert('Clicked!')}>
         Click Me
       </Button>
     );
   }
   ```
   
   ## Properties
   
   <Controls />
   
   ## Examples
   
   ### Primary Button
   
   <Story of={ButtonStories.Primary} />
   
   ### Secondary Button
   
   <Story of={ButtonStories.Secondary} />
   ```

## 4. Testing and Interactions (P1)

1. CRITICAL: Play function for interaction tests:
   ```tsx
   // LoginForm.stories.tsx
   import type { Meta, StoryObj } from '@storybook/react';
   import { within, userEvent, expect } from '@storybook/test';
   import { LoginForm } from './LoginForm';
   
   const meta = {
     title: 'Forms/LoginForm',
     component: LoginForm,
     parameters: {
       layout: 'centered',
     },
   } satisfies Meta<typeof LoginForm>;
   
   export default meta;
   type Story = StoryObj<typeof meta>;
   
   export const Default: Story = {};
   
   export const FilledForm: Story = {
     play: async ({ canvasElement }) => {
       const canvas = within(canvasElement);
       
       // Fill in the form fields
       await userEvent.type(canvas.getByLabelText('Email'), 'user@example.com');
       await userEvent.type(canvas.getByLabelText('Password'), 'password123');
       
       // Click the submit button
       await userEvent.click(canvas.getByRole('button', { name: /sign in/i }));
       
       // Assert that form validation passes
       await expect(canvas.queryByText('Email is required')).not.toBeInTheDocument();
     },
   };
   
   export const ValidationErrors: Story = {
     play: async ({ canvasElement }) => {
       const canvas = within(canvasElement);
       
       // Click submit without filling the form
       await userEvent.click(canvas.getByRole('button', { name: /sign in/i }));
       
       // Assert that validation errors are shown
       await expect(canvas.getByText('Email is required')).toBeInTheDocument();
       await expect(canvas.getByText('Password is required')).toBeInTheDocument();
     },
   };
   ```

2. REQUIRED: Accessibility testing:
   ```js
   // .storybook/test-runner.js
   const { injectAxe, checkA11y } = require('axe-playwright');
   
   module.exports = {
     async preRender(page) {
       await injectAxe(page);
     },
     async postRender(page) {
       await checkA11y(page, {
         detailedReport: true,
         detailedReportOptions: {
           html: true,
         },
       });
     },
   };
   ```

## 5. Integration with UI Libraries (P1)

1. CRITICAL: Tailwind CSS integration:
   ```js
   // .storybook/preview.js
   import '../app/globals.css';
   
   export const parameters = {
     // ... other parameters
   };
   
   // Enable Tailwind dark mode in Storybook
   export const decorators = [
     (Story) => (
       <div className="dark:bg-gray-800 p-4 min-h-screen">
         <Story />
       </div>
     ),
   ];
   ```

2. REQUIRED: Theme switching:
   ```js
   // .storybook/preview.js
   import '../app/globals.css';
   import { themes } from '@storybook/theming';
   
   export const parameters = {
     darkMode: {
       dark: { ...themes.dark },
       light: { ...themes.light },
       stylePreview: true,
     },
   };
   ```

## 6. Advanced Configurations (P2)

1. REQUIRED: Custom viewports:
   ```js
   // .storybook/preview.js
   export const parameters = {
     // ... other parameters
     viewport: {
       viewports: {
         mobile: {
           name: 'Mobile',
           styles: {
             width: '375px',
             height: '667px',
           },
         },
         tablet: {
           name: 'Tablet',
           styles: {
             width: '768px',
             height: '1024px',
           },
         },
         desktop: {
           name: 'Desktop',
           styles: {
             width: '1440px',
             height: '900px',
           },
         },
       },
     },
   };
   ```

2. RECOMMENDED: Environment variable handling:
   ```js
   // .storybook/main.js
   const config = {
     // ... other config
     env: (config) => ({
       ...config,
       NEXT_PUBLIC_API_URL: 'https://mock-api.example.com',
     }),
   };
   ```

## 7. Deployment and CI/CD (P2)

1. REQUIRED: Static build configuration:
   ```json
   // package.json
   {
     "scripts": {
       "build-storybook": "storybook build -o public/storybook",
       "storybook": "storybook dev -p 6006"
     }
   }
   ```

2. RECOMMENDED: GitHub Actions integration:
   ```yaml
   # .github/workflows/storybook.yml
   name: Build and Deploy Storybook
   
   on:
     push:
       branches: [main]
   
   jobs:
     build-and-deploy:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v3
         
         - name: Setup Node.js
           uses: actions/setup-node@v3
           with:
             node-version: '18'
         
         - name: Install dependencies
           run: npm ci
         
         - name: Build Storybook
           run: npm run build-storybook
         
         - name: Deploy to GitHub Pages
           uses: JamesIves/github-pages-deploy-action@v4.3.3
           with:
             branch: gh-pages
             folder: public/storybook
   ```

## 8. Component-Driven Development Workflow (P3)

1. RECOMMENDED: CDD workflow:
   ```
   1. Start with defining component props
   2. Create initial story with base props
   3. Implement component to match story
   4. Add variants and edge cases as stories
   5. Add interaction tests
   6. Document component usage
   7. Review and refine
   ```

2. OPTIONAL: Component status:
   ```js
   // .storybook/preview.js
   export const parameters = {
     // ... other parameters
     componentStatus: {
       statuses: {
         beta: {
           label: 'Beta',
           color: '#FF9900',
           description: 'This component is in Beta',
         },
         stable: {
           label: 'Stable',
           color: '#00C853',
           description: 'This component is stable',
         },
         deprecated: {
           label: 'Deprecated',
           color: '#FF0000',
           description: 'This component is deprecated',
         },
       }
     }
   };
   
   // Component.stories.tsx
   export default {
     title: 'Components/MyComponent',
     component: MyComponent,
     parameters: {
       componentStatus: {
         status: 'beta',
         note: 'API may change in future versions',
       },
     },
   };
   