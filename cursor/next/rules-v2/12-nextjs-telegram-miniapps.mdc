---
description: Guidelines for developing Telegram Mini Apps with Next.js. Apply when creating, configuring, and optimizing Telegram web applications.
globs:
alwaysApply: false
---

# Next.js Telegram Mini Apps Guidelines

## 1. Initial Setup and Configuration (P0)

1. CRITICAL: Project initialization:
   ```bash
   # Create a new Next.js project
   npx create-next-app@latest telegram-mini-app
   
   # Install Telegram Mini Apps dependencies
   npm install @tma.js/sdk @tma.js/sdk-react
   ```

2. REQUIRED: Mini App configuration:
   ```js
   // next.config.js
   /** @type {import('next').NextConfig} */
   const nextConfig = {
     reactStrictMode: true,
     output: 'export', // Static export for Telegram hosting
     distDir: 'dist',
     images: {
       unoptimized: true, // Required for static export
     },
     // Remove trailing slashes for Telegram Mini Apps
     async rewrites() {
       return [
         {
           source: '/:path/', 
           destination: '/:path',
         },
       ]
     },
   };
   
   module.exports = nextConfig;
   ```

3. ESSENTIAL: Environment variables:
   ```
   # .env.local
   NEXT_PUBLIC_APP_ID=your_app_id
   NEXT_PUBLIC_BOT_USERNAME=your_bot_username
   ```

## 2. SDK Integration (P0)

1. CRITICAL: SDK provider setup:
   ```tsx
   // app/providers.tsx
   'use client'
   
   import { SDKProvider, DisplayGate, useInitData } from '@tma.js/sdk-react';
   import { PropsWithChildren } from 'react';
   
   export function TelegramProvider({ children }: PropsWithChildren) {
     return (
       <SDKProvider options={{ acceptCustomStyles: true, cssVars: true }}>
         <DisplayGate>
           {children}
         </DisplayGate>
       </SDKProvider>
     );
   }
   ```

2. REQUIRED: Root layout integration:
   ```tsx
   // app/layout.tsx
   import { TelegramProvider } from './providers';
   
   export default function RootLayout({
     children,
   }: {
     children: React.ReactNode
   }) {
     return (
       <html lang="en">
         <body>
           <TelegramProvider>
             {children}
           </TelegramProvider>
         </body>
       </html>
     );
   }
   ```

3. ESSENTIAL: Init data access:
   ```tsx
   // components/user-info.tsx
   'use client'
   
   import { useInitData, useInitDataRaw } from '@tma.js/sdk-react';
   
   export function UserInfo() {
     const initData = useInitData();
     const initDataRaw = useInitDataRaw();
     
     if (!initData?.user) {
       return <div>No user data available</div>;
     }
     
     return (
       <div>
         <h2>User Info</h2>
         <p>ID: {initData.user.id}</p>
         <p>First Name: {initData.user.firstName}</p>
         {initData.user.lastName && (
           <p>Last Name: {initData.user.lastName}</p>
         )}
         <p>Username: {initData.user.username || 'No username'}</p>
         <p>Language Code: {initData.user.languageCode}</p>
         
         {/* Store the raw init data for backend validation */}
         <input type="hidden" name="tgInitData" value={initDataRaw} />
       </div>
     );
   }
   ```

## 3. UI Adaptation (P0)

1. CRITICAL: Viewport meta tag:
   ```tsx
   // app/layout.tsx
   export const metadata = {
     title: 'Telegram Mini App',
     description: 'Built with Next.js',
     viewport: {
       width: 'device-width',
       initialScale: 1,
       maximumScale: 1,
       userScalable: 'no',
       viewportFit: 'cover',
     },
   };
   ```

2. REQUIRED: Theme adaptation:
   ```tsx
   // app/globals.css
   :root {
     /* Telegram theme variables will be available as CSS variables */
     --tg-theme-bg-color: #fff;
     --tg-theme-text-color: #000;
     --tg-theme-hint-color: #999;
     --tg-theme-link-color: #2678b6;
     --tg-theme-button-color: #2678b6;
     --tg-theme-button-text-color: #fff;
     --tg-theme-secondary-bg-color: #f5f5f5;
   }
   
   body {
     background-color: var(--tg-theme-bg-color);
     color: var(--tg-theme-text-color);
     margin: 0;
     padding: 0;
     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
       Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
   }
   
   a {
     color: var(--tg-theme-link-color);
   }
   
   .hint {
     color: var(--tg-theme-hint-color);
   }
   
   .button {
     background-color: var(--tg-theme-button-color);
     color: var(--tg-theme-button-text-color);
     border: none;
     border-radius: 8px;
     padding: 10px 16px;
     cursor: pointer;
   }
   
   .secondary-bg {
     background-color: var(--tg-theme-secondary-bg-color);
   }
   ```

3. ESSENTIAL: Safe area handling:
   ```css
   /* app/globals.css */
   body {
     padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
   }
   
   /* For iOS devices with notch */
   .main-container {
     padding-top: max(16px, env(safe-area-inset-top));
     padding-bottom: max(16px, env(safe-area-inset-bottom));
     padding-left: max(16px, env(safe-area-inset-left));
     padding-right: max(16px, env(safe-area-inset-right));
   }
   ```

## 4. Telegram Web App API (P1)

1. CRITICAL: Main button implementation:
   ```tsx
   // components/main-button.tsx
   'use client'
   
   import { useEffect, useState } from 'react';
   import { useMainButton } from '@tma.js/sdk-react';
   
   interface MainButtonProps {
     text: string;
     onClick: () => void;
     isActive?: boolean;
     isProgressVisible?: boolean;
   }
   
   export function MainButton({ 
     text, 
     onClick, 
     isActive = true, 
     isProgressVisible = false 
   }: MainButtonProps) {
     const mainButton = useMainButton();
     
     useEffect(() => {
       // Configure main button
       mainButton.setText(text);
       
       if (isActive) {
         mainButton.enable();
         mainButton.show();
       } else {
         mainButton.disable();
       }
       
       if (isProgressVisible) {
         mainButton.showProgress();
       } else {
         mainButton.hideProgress();
       }
       
       // Set up event handler
       mainButton.on('click', onClick);
       
       // Cleanup
       return () => {
         mainButton.hide();
         mainButton.offAll();
       };
     }, [mainButton, text, onClick, isActive, isProgressVisible]);
     
     return null; // No UI rendered as this uses Telegram's native UI
   }
   ```

2. REQUIRED: Back button implementation:
   ```tsx
   // components/back-button.tsx
   'use client'
   
   import { useEffect } from 'react';
   import { useBackButton } from '@tma.js/sdk-react';
   import { useRouter } from 'next/navigation';
   
   interface BackButtonProps {
     onBack?: () => void;
   }
   
   export function BackButton({ onBack }: BackButtonProps) {
     const backButton = useBackButton();
     const router = useRouter();
     
     useEffect(() => {
       // Show back button
       backButton.show();
       
       // Set handler
       backButton.on('click', () => {
         if (onBack) {
           onBack();
         } else {
           router.back();
         }
       });
       
       // Clean up
       return () => {
         backButton.hide();
         backButton.offAll();
       };
     }, [backButton, router, onBack]);
     
     return null; // No UI rendered
   }
   ```

3. ESSENTIAL: Haptic feedback:
   ```tsx
   // components/haptic-button.tsx
   'use client'
   
   import { useHapticFeedback } from '@tma.js/sdk-react';
   
   interface HapticButtonProps {
     children: React.ReactNode;
     feedbackType?: 'impact' | 'notification' | 'selection'; 
     impactStyle?: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft';
     notificationType?: 'success' | 'warning' | 'error';
     onClick?: () => void;
     className?: string;
   }
   
   export function HapticButton({
     children,
     feedbackType = 'impact',
     impactStyle = 'medium',
     notificationType = 'success',
     onClick,
     className,
   }: HapticButtonProps) {
     const haptic = useHapticFeedback();
     
     const handleClick = () => {
       // Trigger haptic feedback
       if (feedbackType === 'impact') {
         haptic.impactOccurred(impactStyle);
       } else if (feedbackType === 'notification') {
         haptic.notificationOccurred(notificationType);
       } else if (feedbackType === 'selection') {
         haptic.selectionChanged();
       }
       
       // Call the provided click handler
       if (onClick) {
         onClick();
       }
     };
     
     return (
       <button 
         className={`tg-button ${className || ''}`} 
         onClick={handleClick}
       >
         {children}
       </button>
     );
   }
   ```

## 5. Backend Integration (P1)

1. CRITICAL: Init data validation:
   ```ts
   // server/validate-tg-data.ts
   import crypto from 'crypto';

   interface ValidationResult {
     isValid: boolean;
     data?: Record<string, string | number>;
     error?: string;
   }

   export function validateTelegramWebAppData(
     initDataString: string,
     botToken: string
   ): ValidationResult {
     try {
       // Parse the data
       const urlParams = new URLSearchParams(initDataString);
       const hash = urlParams.get('hash');
       
       if (!hash) {
         return { isValid: false, error: 'Hash is missing' };
       }
       
       // Remove hash from the validation data
       urlParams.delete('hash');
       
       // Sort params alphabetically
       const dataCheckString = Array.from(urlParams.entries())
         .sort(([a], [b]) => a.localeCompare(b))
         .map(([key, value]) => `${key}=${value}`)
         .join('\n');
       
       // Generate the secret key (SHA-256 of bot token)
       const secretKey = crypto
         .createHmac('sha256', 'WebAppData')
         .update(botToken)
         .digest();
       
       // Calculate the data hash
       const calculatedHash = crypto
         .createHmac('sha256', secretKey)
         .update(dataCheckString)
         .digest('hex');
       
       // Verify the signature
       if (calculatedHash !== hash) {
         return { isValid: false, error: 'Invalid hash' };
       }
       
       // Convert data to object
       const data: Record<string, string | number> = {};
       urlParams.forEach((value, key) => {
         // Try to parse numbers
         const numValue = parseFloat(value);
         data[key] = isNaN(numValue) ? value : numValue;
       });
       
       return { isValid: true, data };
     } catch (error) {
       return { 
         isValid: false, 
         error: error instanceof Error ? error.message : 'Unknown error' 
       };
     }
   }
   ```

2. REQUIRED: API route with validation:
   ```ts
   // app/api/save-data/route.ts
   import { NextRequest, NextResponse } from 'next/server';
   import { validateTelegramWebAppData } from '@/server/validate-tg-data';

   export async function POST(request: NextRequest) {
     try {
       const { initData, userData } = await request.json();
       
       // Validate Telegram init data
       const validationResult = validateTelegramWebAppData(
         initData,
         process.env.BOT_TOKEN as string
       );
       
       if (!validationResult.isValid) {
         return NextResponse.json({ error: validationResult.error }, { status: 400 });
       }
       
       // Process the validated data
       const telegramUserId = validationResult.data?.user?.id;
       
       if (!telegramUserId) {
         return NextResponse.json({ error: 'User ID not found' }, { status: 400 });
       }
       
       // Save or process the data (example)
       // await saveToDatabase(telegramUserId, userData);
       
       return NextResponse.json({ success: true });
     } catch (error) {
       console.error('Error processing request:', error);
       return NextResponse.json(
         { error: 'Internal server error' }, 
         { status: 500 }
       );
     }
   }
   ```

3. ESSENTIAL: Data submission:
   ```tsx
   // components/submit-form.tsx
   'use client'
   
   import { useState } from 'react';
   import { useInitDataRaw, useMainButton } from '@tma.js/sdk-react';
   
   export function SubmitForm() {
     const [name, setName] = useState('');
     const [email, setEmail] = useState('');
     const [isSubmitting, setIsSubmitting] = useState(false);
     const [error, setError] = useState<string | null>(null);
     const [success, setSuccess] = useState(false);
     
     const initDataRaw = useInitDataRaw();
     const mainButton = useMainButton();
     
     // Set up main button
     mainButton.setText('Submit');
     mainButton.show();
     mainButton.on('click', handleSubmit);
     
     async function handleSubmit() {
       try {
         setIsSubmitting(true);
         setError(null);
         mainButton.showProgress();
         
         if (!name || !email) {
           setError('Please fill in all fields');
           return;
         }
         
         const response = await fetch('/api/save-data', {
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({
             initData: initDataRaw,
             userData: { name, email }
           })
         });
         
         const data = await response.json();
         
         if (!response.ok) {
           throw new Error(data.error || 'Failed to submit data');
         }
         
         setSuccess(true);
         mainButton.setText('✅ Submitted');
         mainButton.disable();
         
       } catch (err) {
         setError(err instanceof Error ? err.message : 'An error occurred');
       } finally {
         setIsSubmitting(false);
         mainButton.hideProgress();
       }
     }
     
     if (success) {
       return <div className="success-message">Data submitted successfully!</div>;
     }
     
     return (
       <div className="form-container">
         {error && <div className="error-message">{error}</div>}
         
         <div className="form-group">
           <label htmlFor="name">Name</label>
           <input
             id="name"
             type="text"
             value={name}
             onChange={(e) => setName(e.target.value)}
             disabled={isSubmitting}
           />
         </div>
         
         <div className="form-group">
           <label htmlFor="email">Email</label>
           <input
             id="email"
             type="email"
             value={email}
             onChange={(e) => setEmail(e.target.value)}
             disabled={isSubmitting}
           />
         </div>
       </div>
     );
   }
   ```

## 6. Popup and Native UI (P2)

1. REQUIRED: Popup implementation:
   ```tsx
   // components/tg-popup.tsx
   'use client'
   
   import { usePopup } from '@tma.js/sdk-react';
   
   interface TgPopupProps {
     title: string;
     message: string;
     buttons?: Array<{
       type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';
       text: string;
       onPress?: () => void;
     }>;
   }
   
   export function showTelegramPopup({ title, message, buttons = [] }: TgPopupProps) {
     const popup = usePopup();
     
     // Add default button if none provided
     if (buttons.length === 0) {
       buttons = [{ type: 'close', text: 'Close' }];
     }
     
     // Show popup
     popup.open({
       title,
       message,
       buttons: buttons.map(({ type = 'default', text, onPress }) => ({
         type,
         text,
         ...(onPress ? { onClick: onPress } : {}),
       })),
     });
   }
   ```

2. RECOMMENDED: QR scanner:
   ```tsx
   // components/qr-scanner.tsx
   'use client'
   
   import { useState } from 'react';
   import { useScanQrPopup } from '@tma.js/sdk-react';
   
   interface QrScannerProps {
     onScan: (data: string) => void;
     onError?: (error: string) => void;
   }
   
   export function QrScanner({ onScan, onError }: QrScannerProps) {
     const [isScanning, setIsScanning] = useState(false);
     const scanQr = useScanQrPopup();
     
     const handleScan = async () => {
       try {
         setIsScanning(true);
         
         // Open QR scanner
         const data = await scanQr.open();
         
         if (data) {
           onScan(data);
         }
       } catch (error) {
         console.error('QR scan error:', error);
         if (onError) {
           onError(error instanceof Error ? error.message : 'Failed to scan QR code');
         }
       } finally {
         setIsScanning(false);
       }
     };
     
     return (
       <button 
         className="tg-button scan-button" 
         onClick={handleScan}
         disabled={isScanning}
       >
         {isScanning ? 'Scanning...' : 'Scan QR Code'}
       </button>
     );
   }
   ```

## 7. Performance Optimization (P2)

1. REQUIRED: Bundle size optimization:
   ```js
   // next.config.js
   const withBundleAnalyzer = require('@next/bundle-analyzer')({
     enabled: process.env.ANALYZE === 'true',
   });
   
   /** @type {import('next').NextConfig} */
   const nextConfig = {
     // ...other config
     
     // Reduce bundle size
     webpack: (config, { isServer }) => {
       // Only include necessary locales from date-fns
       config.resolve.alias = {
         ...config.resolve.alias,
         'date-fns': 'date-fns/esm',
       };
       
       // Optimize SVGs
       config.module.rules.push({
         test: /\.svg$/,
         use: ['@svgr/webpack', 'url-loader'],
       });
       
       return config;
     },
   };
   
   module.exports = withBundleAnalyzer(nextConfig);
   ```

2. RECOMMENDED: Image optimization:
   ```tsx
   // components/optimized-image.tsx
   'use client'
   
   import { useState, useEffect } from 'react';
   
   interface OptimizedImageProps {
     src: string;
     alt: string;
     width?: number;
     height?: number;
     className?: string;
     priority?: boolean;
   }
   
   export function OptimizedImage({
     src,
     alt,
     width,
     height,
     className = '',
     priority = false,
   }: OptimizedImageProps) {
     const [loaded, setLoaded] = useState(false);
     
     // Preload high priority images
     useEffect(() => {
       if (priority && src) {
         const img = new Image();
         img.src = src;
       }
     }, [priority, src]);
     
     return (
       <div className={`image-container ${loaded ? 'loaded' : 'loading'}`}>
         {!loaded && <div className="image-placeholder" />}
         
         <img
           src={src}
           alt={alt}
           width={width}
           height={height}
           className={`optimized-image ${className}`}
           onLoad={() => setLoaded(true)}
           loading={priority ? 'eager' : 'lazy'}
         />
       </div>
     );
   }
   ```

## 8. Deployment and Testing (P3)

1. RECOMMENDED: Testing configuration:
   ```ts
   // __tests__/setup.ts
   
   // Mock Telegram Web App SDK
   global.window.Telegram = {
     WebApp: {
       ready: jest.fn(),
       close: jest.fn(),
       expand: jest.fn(),
       isExpanded: false,
       MainButton: {
         show: jest.fn(),
         hide: jest.fn(),
         enable: jest.fn(),
         disable: jest.fn(),
         setText: jest.fn(),
         onClick: jest.fn(),
         offClick: jest.fn(),
         showProgress: jest.fn(),
         hideProgress: jest.fn(),
       },
       BackButton: {
         show: jest.fn(),
         hide: jest.fn(),
         onClick: jest.fn(),
         offClick: jest.fn(),
         isVisible: false,
       },
       initData: 'mock_init_data',
       initDataUnsafe: {
         user: {
           id: 123456789,
           first_name: 'Test',
           last_name: 'User',
           username: 'testuser',
           language_code: 'en',
         },
         start_param: '',
         auth_date: Math.floor(Date.now() / 1000),
       },
       themeParams: {
         bg_color: '#ffffff',
         text_color: '#000000',
         hint_color: '#999999',
         link_color: '#2678b6',
         button_color: '#2678b6',
         button_text_color: '#ffffff',
         secondary_bg_color: '#f5f5f5',
       },
     },
   };
   ```

2. OPTIONAL: GitHub Actions deployment:
   ```yaml
   # .github/workflows/deploy.yml
   name: Deploy Telegram Mini App
   
   on:
     push:
       branches: [main]
   
   jobs:
     build-and-deploy:
       runs-on: ubuntu-latest
       
       steps:
         - uses: actions/checkout@v3
         
         - name: Setup Node.js
           uses: actions/setup-node@v3
           with:
             node-version: '18'
         
         - name: Install dependencies
           run: npm ci
         
         - name: Build
           run: npm run build
           
         - name: Deploy to hosting
           uses: peaceiris/actions-gh-pages@v3
           with:
             github_token: ${{ secrets.GITHUB_TOKEN }}
             publish_dir: ./dist
   ``` 