---
description: "Guidelines for developing type-safe, reusable components in Next.js applications with TypeScript and shadcn/ui"
globs:
alwaysApply: false
---

# Next.js TypeScript Component Development

This document provides guidelines for developing components in Next.js applications using TypeScript, with a focus on type safety, reusability, and integration with shadcn/ui. For project structure recommendations, see @5-nextjs-typescript-project-structure.mdc. For TypeScript usage, refer to @6-nextjs-typescript-usage.mdc.

## 1. Component Organization (P0)

### 1.1 Atomic Design Structure (P0)

Organize components following the Atomic Design methodology:

```
components/
├── ui/               # shadcn/ui base components
├── atoms/            # Basic building blocks
│   ├── Button/
│   ├── Input/
│   └── Typography/
├── molecules/        # Combinations of atoms
│   ├── FormField/
│   ├── SearchBar/
│   └── Card/
├── organisms/        # Complex UI sections
│   ├── Header/
│   ├── Sidebar/
│   └── DataTable/
└── templates/        # Page layout templates
    ├── DashboardLayout/
    └── AuthLayout/
```

### 1.2 Component File Structure (P0)

Structure each component with a consistent organization:

#### For Simpler Components (Atoms):

```typescript
// components/atoms/Button/Button.tsx
'use client';

import React from 'react';
import { cn } from '@/lib/utils';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
  fullWidth?: boolean;
}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ 
    children, 
    className,
    variant = 'primary', 
    size = 'md', 
    loading = false, 
    fullWidth = false, 
    ...props 
  }, ref) => {
    return (
      <button
        ref={ref}
        className={cn(
          'button-base',
          variant === 'primary' && 'button-primary',
          variant === 'secondary' && 'button-secondary',
          variant === 'outline' && 'button-outline',
          variant === 'ghost' && 'button-ghost',
          size === 'sm' && 'text-sm py-1 px-2',
          size === 'md' && 'text-base py-2 px-4',
          size === 'lg' && 'text-lg py-3 px-6',
          fullWidth && 'w-full',
          loading && 'opacity-70 cursor-not-allowed',
          className
        )}
        disabled={loading || props.disabled}
        {...props}
      >
        {loading ? <span>Loading...</span> : children}
      </button>
    );
  }
);

Button.displayName = 'Button';

// Re-export from index.ts file
// components/atoms/Button/index.ts
export * from './Button';
```

#### For Complex Components (Organisms):

```typescript
// Directory structure for complex components
// components/organisms/DataTable/
// ├── DataTable.tsx         # Main component
// ├── DataTableColumn.tsx   # Column component
// ├── DataTablePagination.tsx # Pagination component
// ├── DataTableFilters.tsx  # Filters component
// ├── types.ts              # Type definitions
// ├── utils.ts              # Helper functions
// └── index.ts              # Re-exports

// components/organisms/DataTable/types.ts
export interface DataTableProps<T> {
  data: T[];
  columns: DataTableColumn<T>[];
  loading?: boolean;
  pagination?: PaginationProps;
  onRowClick?: (row: T) => void;
}

export interface DataTableColumn<T> {
  id: string;
  header: string;
  accessor: keyof T | ((row: T) => React.ReactNode);
  sortable?: boolean;
  width?: string;
}

export interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

// components/organisms/DataTable/DataTable.tsx
// Main component implementation

// components/organisms/DataTable/index.ts
export * from './DataTable';
export * from './DataTableColumn';
export * from './DataTablePagination';
export * from './DataTableFilters';
export * from './types';
```

### 1.3 Component Barrel Exports (P1)

Use barrel exports to simplify imports:

```typescript
// components/atoms/index.ts
export * from './Button';
export * from './Input';
export * from './Typography';

// components/index.ts
export * from './atoms';
export * from './molecules';
export * from './organisms';
export * from './templates';
```

## 2. Component Types (P0)

### 2.1 Prop Types (P0)

Always use TypeScript interfaces for component props:

```typescript
// ✅ Good - Explicit interface for props
export interface UserProfileProps {
  user: User;
  showAvatar?: boolean;
  onUpdate?: (user: User) => void;
}

export const UserProfile: React.FC<UserProfileProps> = ({ 
  user, 
  showAvatar = true,
  onUpdate
}) => {
  // Implementation
};

// ❌ Bad - Inline types or any
export const UserProfile = ({ 
  user, 
  showAvatar = true,
  onUpdate
}: any) => {
  // Implementation
};
```

### 2.2 Generic Components (P1)

Use TypeScript generics for flexible, reusable components:

```typescript
// Generic list component
export interface ListProps<T> {
  items: T[];
  renderItem: (item: T, index: number) => React.ReactNode;
  keyExtractor: (item: T) => string;
  emptyMessage?: string;
}

export function List<T>({ 
  items, 
  renderItem, 
  keyExtractor,
  emptyMessage = "No items to display"
}: ListProps<T>) {
  if (items.length === 0) {
    return <div className="empty-state">{emptyMessage}</div>;
  }
  
  return (
    <ul className="list">
      {items.map((item, index) => (
        <li key={keyExtractor(item)} className="list-item">
          {renderItem(item, index)}
        </li>
      ))}
    </ul>
  );
}

// Usage
<List<User>
  items={users}
  keyExtractor={(user) => user.id}
  renderItem={(user) => <UserCard user={user} />}
/>
```

### 2.3 Component Event Handlers (P1)

Type event handlers properly:

```typescript
// Event handler types
export interface FormFieldProps {
  label: string;
  error?: string;
  // Correctly typed event handlers
  onChange?: React.ChangeEventHandler<HTMLInputElement>;
  onBlur?: React.FocusEventHandler<HTMLInputElement>;
  onFocus?: React.FocusEventHandler<HTMLInputElement>;
}

// Implementation with typed events
export const FormField: React.FC<FormFieldProps> = ({
  label,
  error,
  onChange,
  onBlur,
  onFocus,
}) => {
  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {
    // TypeScript knows event is React.ChangeEvent<HTMLInputElement>
    if (onChange) {
      onChange(event);
    }
  };
  
  return (
    <div className="form-field">
      <label>{label}</label>
      <input 
        onChange={handleChange}
        onBlur={onBlur}
        onFocus={onFocus}
      />
      {error && <div className="error">{error}</div>}
    </div>
  );
};
```

### 2.4 Component Refs (P1)

Properly type forwarded refs:

```typescript
// Component with ref forwarding
export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ label, error, className, ...props }, ref) => {
    return (
      <div className="input-container">
        {label && <label className="input-label">{label}</label>}
        <input
          ref={ref}
          className={cn(
            'input',
            error && 'input-error',
            className
          )}
          {...props}
        />
        {error && <div className="input-error-message">{error}</div>}
      </div>
    );
  }
);

Input.displayName = 'Input';
```

## 3. Client and Server Components (P0)

### 3.1 Client Components (P0)

Use the 'use client' directive at the top of client component files:

```typescript
'use client';

import { useState } from 'react';

export function ClientCounter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

### 3.2 Server Components (P0)

By default, components in Next.js App Router are server components. Avoid using client-only features in server components:

```typescript
// This is a server component (no 'use client' directive)
import { fetchUsers } from '@/services/user-service';
import { ClientUserCard } from './ClientUserCard';

export async function UserList() {
  // Data fetching in server component
  const users = await fetchUsers();
  
  return (
    <div className="user-list">
      {users.map(user => (
        <ClientUserCard key={user.id} user={user} />
      ))}
    </div>
  );
}
```

### 3.3 Component Boundaries (P1)

Establish clear boundaries between server and client components:

```typescript
// ServerDataProvider.tsx (Server Component)
import { ClientDataRenderer } from './ClientDataRenderer';

export async function ServerDataProvider() {
  // Fetch data on the server
  const data = await fetchSomeData();
  
  // Pass data to a client component for interactivity
  return <ClientDataRenderer initialData={data} />;
}

// ClientDataRenderer.tsx (Client Component)
'use client';

import { useState, useEffect } from 'react';

export function ClientDataRenderer({ initialData }) {
  // Client-side state based on server data
  const [data, setData] = useState(initialData);
  
  // Client-side interactivity
  function handleRefresh() {
    // Client-side data fetching
    fetchMoreData().then(setData);
  }
  
  return (
    <div>
      {/* Render data */}
      <button onClick={handleRefresh}>Refresh</button>
    </div>
  );
}
```

## 4. Component Best Practices (P0)

### 4.1 Component Composition (P0)

Use component composition for flexible UI:

```typescript
// Composable components
export function Card({ children, className, ...props }) {
  return (
    <div className={cn('card', className)} {...props}>
      {children}
    </div>
  );
}

Card.Header = function CardHeader({ children, className, ...props }) {
  return (
    <div className={cn('card-header', className)} {...props}>
      {children}
    </div>
  );
};

Card.Body = function CardBody({ children, className, ...props }) {
  return (
    <div className={cn('card-body', className)} {...props}>
      {children}
    </div>
  );
};

Card.Footer = function CardFooter({ children, className, ...props }) {
  return (
    <div className={cn('card-footer', className)} {...props}>
      {children}
    </div>
  );
};

// Usage
<Card>
  <Card.Header>User Details</Card.Header>
  <Card.Body>
    <p>Name: John Doe</p>
    <p>Email: john@example.com</p>
  </Card.Body>
  <Card.Footer>
    <Button>Edit</Button>
  </Card.Footer>
</Card>
```

### 4.2 Conditional Rendering (P1)

Use TypeScript to handle conditional rendering safely:

```typescript
interface UserProfileProps {
  user: User | null;
  isLoading?: boolean;
  error?: Error | null;
}

export function UserProfile({ user, isLoading, error }: UserProfileProps) {
  if (isLoading) {
    return <Spinner />;
  }
  
  if (error) {
    return <ErrorMessage message={error.message} />;
  }
  
  if (!user) {
    return <EmptyState message="User not found" />;
  }
  
  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  );
}
```

### 4.3 Performance Optimization (P1)

Optimize components for performance:

```typescript
'use client';

import { memo, useState, useCallback } from 'react';

interface TodoItemProps {
  id: string;
  text: string;
  completed: boolean;
  onToggle: (id: string) => void;
}

// Memoize component to prevent unnecessary re-renders
export const TodoItem = memo(function TodoItem({ 
  id, 
  text, 
  completed, 
  onToggle 
}: TodoItemProps) {
  // Memoize callback to prevent new function creation on re-render
  const handleToggle = useCallback(() => {
    onToggle(id);
  }, [id, onToggle]);
  
  return (
    <div className={`todo-item ${completed ? 'completed' : ''}`}>
      <input 
        type="checkbox" 
        checked={completed} 
        onChange={handleToggle} 
      />
      <span>{text}</span>
    </div>
  );
});

// Parent component
export function TodoList({ todos }) {
  const [items, setItems] = useState(todos);
  
  // Stable callback
  const handleToggle = useCallback((id: string) => {
    setItems(prev => 
      prev.map(todo => 
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  }, []);
  
  return (
    <div>
      {items.map(todo => (
        <TodoItem 
          key={todo.id}
          id={todo.id}
          text={todo.text}
          completed={todo.completed}
          onToggle={handleToggle}
        />
      ))}
    </div>
  );
}
```

### 4.4 Component Error Boundaries (P2)

Use TypeScript with error boundaries:

```typescript
'use client';

import React, { Component, ErrorInfo, ReactNode } from 'react';

interface ErrorBoundaryProps {
  fallback?: ReactNode;
  children: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

export class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
    
    // Log error to monitoring service
    console.error('Component error:', error, errorInfo);
  }

  render(): ReactNode {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }
      
      return (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <p>{this.state.error?.message || 'Unknown error'}</p>
        </div>
      );
    }

    return this.props.children;
  }
}

// Usage
<ErrorBoundary fallback={<ErrorPage />}>
  <ComponentThatMightError />
</ErrorBoundary>
```

## 5. shadcn/ui Integration (P1)

### 5.1 Customizing shadcn/ui Components (P1)

Extend shadcn/ui components with TypeScript:

```typescript
// components/ui/custom-button.tsx
import { Button, ButtonProps } from "@/components/ui/button";
import { cn } from "@/lib/utils";

// Extend the original Button props
export interface CustomButtonProps extends ButtonProps {
  customColor?: 'success' | 'warning' | 'info';
}

export const CustomButton = ({
  customColor,
  className,
  ...props
}: CustomButtonProps) => {
  return (
    <Button
      className={cn(
        className,
        customColor === 'success' && 'bg-green-600 hover:bg-green-700',
        customColor === 'warning' && 'bg-amber-500 hover:bg-amber-600',
        customColor === 'info' && 'bg-blue-500 hover:bg-blue-600',
      )}
      {...props}
    />
  );
};
```

### 5.2 Component Variants with Tailwind and TypeScript (P1)

Create type-safe variants for components:

```typescript
// components/ui/badge.tsx
import { VariantProps, cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground border border-input hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-6 px-2",
        sm: "h-5 px-1.5 text-xs",
        lg: "h-7 px-3 text-sm",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

export function Badge({ className, variant, size, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant, size }), className)} {...props} />
  );
}
```

### 5.3 Form Components with React Hook Form (P2)

Integrate shadcn/ui with React Hook Form and TypeScript:

```typescript
'use client';

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

// Define form schema with Zod
const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
  email: z.string().email({
    message: "Please enter a valid email address.",
  }),
});

// Infer TypeScript type from Zod schema
type FormValues = z.infer<typeof formSchema>;

export function ProfileForm() {
  // Initialize form with TypeScript types
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      email: "",
    },
  });

  // Handle form submission
  function onSubmit(values: FormValues) {
    console.log(values);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="johndoe" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input placeholder="john@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Update profile</Button>
      </form>
    </Form>
  );
}
```

## 6. Testing Components (P2)

### 6.1 Component Testing Setup (P2)

Set up TypeScript support for testing components:

```typescript
// components/Button/Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button component', () => {
  it('renders correctly', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });
  
  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  
  it('shows loading state', () => {
    render(<Button loading>Click me</Button>);
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });
  
  it('applies variant and size classes', () => {
    const { container } = render(
      <Button variant="primary" size="lg">Large Button</Button>
    );
    
    const buttonElement = container.firstChild as HTMLElement;
    expect(buttonElement).toHaveClass('button-primary');
    expect(buttonElement).toHaveClass('text-lg');
  });
});
```

### 6.2 Mock Component Props (P2)

Create type-safe mocks for component props:

```typescript
// tests/mocks/props.ts
import { UserProfileProps } from '@/components/organisms/UserProfile/UserProfile';

// Mock user for testing
export const mockUser = {
  id: '1',
  name: 'John Doe',
  email: 'john@example.com',
  role: 'admin'
};

// Mock props for UserProfile component
export const mockUserProfileProps: UserProfileProps = {
  user: mockUser,
  showAvatar: true,
  onUpdate: jest.fn(),
};
```

## 7. Component Documentation (P3)

### 7.1 Component Documentation with TypeScript (P3)

Document components with comprehensive JSDoc comments:

```typescript
/**
 * DataTable component displays tabular data with sorting, filtering, and pagination.
 * 
 * @template T - The type of data object to display
 * @param {DataTableProps<T>} props - The component props
 * @returns {JSX.Element} - Rendered component
 * 
 * @example
 * ```tsx
 * <DataTable
 *   data={users}
 *   columns={[
 *     { id: 'name', header: 'Name', accessor: 'name' },
 *     { id: 'email', header: 'Email', accessor: 'email' },
 *   ]}
 *   pagination={{
 *     currentPage: 1,
 *     totalPages: 5,
 *     onPageChange: (page) => setCurrentPage(page)
 *   }}
 * />
 * ```
 */
export function DataTable<T>({ 
  data, 
  columns, 
  loading = false,
  pagination,
  onRowClick
}: DataTableProps<T>): JSX.Element {
  // Implementation
}
```

### 7.2 Storybook Integration (P3)

Use TypeScript with Storybook for component documentation:

```typescript
// components/Button/Button.stories.tsx
import type { Meta, StoryObj } from '@storybook/react';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  title: 'Atoms/Button',
  component: Button,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['primary', 'secondary', 'outline', 'ghost'],
    },
    size: {
      control: 'select',
      options: ['sm', 'md', 'lg'],
    },
    loading: {
      control: 'boolean',
    },
    fullWidth: {
      control: 'boolean',
    },
  },
};

export default meta;
type Story = StoryObj<typeof Button>;

export const Primary: Story = {
  args: {
    variant: 'primary',
    size: 'md',
    children: 'Primary Button',
  },
};

export const Secondary: Story = {
  args: {
    variant: 'secondary',
    size: 'md',
    children: 'Secondary Button',
  },
};

export const Loading: Story = {
  args: {
    variant: 'primary',
    size: 'md',
    loading: true,
    children: 'Loading Button',
  },
};

export const Large: Story = {
  args: {
    variant: 'primary',
    size: 'lg',
    children: 'Large Button',
  },
};
``` 