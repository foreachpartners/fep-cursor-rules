---
description: Guidelines for implementing and customizing shadcn/ui components in Next.js applications.
globs:
alwaysApply: false
---

# Next.js shadcn/ui Guidelines

## 1. Setup and Installation (P0)

1. CRITICAL: Initialize:
   ```bash
   npx shadcn-ui@latest init
   
   # Configuration options:
   √ TypeScript: Yes
   √ Style: Default
   √ Base color: Slate
   √ CSS file: app/globals.css
   √ CSS variables: Yes
   √ tailwind.config.js: tailwind.config.js
   √ Components path: @/components
   √ Utils path: @/lib/utils
   √ React Server Components: Yes
   ```

2. REQUIRED: Add components:
   ```bash
   # Add components
   npx shadcn-ui@latest add button card dialog
   ```

## 2. Basic Usage (P0)

1. CRITICAL: Component usage:
   ```tsx
   import { Button } from "@/components/ui/button"
   import { Card, CardHeader, CardContent } from "@/components/ui/card"
   
   export default function Page() {
     return (
       <Card>
         <CardHeader>Title</CardHeader>
         <CardContent>
           <Button>Click me</Button>
         </CardContent>
       </Card>
     )
   }
   ```

2. REQUIRED: Client components:
   ```tsx
   "use client"
   
   import { useState } from "react"
   import { Button } from "@/components/ui/button"
   
   export function Counter() {
     const [count, setCount] = useState(0)
     return <Button onClick={() => setCount(count + 1)}>{count}</Button>
   }
   ```

## 3. Forms and Validation (P0)

1. CRITICAL: Form setup:
   ```tsx
   import { zodResolver } from "@hookform/resolvers/zod"
   import { useForm } from "react-hook-form"
   import * as z from "zod"
   import { Form, FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form"
   
   const schema = z.object({
     email: z.string().email(),
     password: z.string().min(8),
   })
   
   export function LoginForm() {
     const form = useForm({
       resolver: zodResolver(schema),
       defaultValues: { email: "", password: "" },
     })
   
     return (
       <Form {...form}>
         <form onSubmit={form.handleSubmit(console.log)}>
           <FormField
             control={form.control}
             name="email"
             render={({ field }) => (
               <FormItem>
                 <FormLabel>Email</FormLabel>
                 <FormControl>
                   <Input {...field} />
                 </FormControl>
               </FormItem>
             )}
           />
           <Button type="submit">Submit</Button>
         </form>
       </Form>
     )
   }
   ```

## 4. Theme Customization (P1)

1. CRITICAL: Colors:
   ```css
   /* globals.css */
   @layer base {
     :root {
       --background: 0 0% 100%;
       --foreground: 222.2 84% 4.9%;
       --primary: 222.2 47.4% 11.2%;
       --primary-foreground: 210 40% 98%;
     }
   
     .dark {
       --background: 222.2 84% 4.9%;
       --foreground: 210 40% 98%;
       --primary: 210 40% 98%;
       --primary-foreground: 222.2 47.4% 11.2%;
     }
   }
   ```

2. REQUIRED: Tailwind config:
   ```js
   // tailwind.config.js
   module.exports = {
     darkMode: ["class"],
     theme: {
       extend: {
         colors: {
           background: "hsl(var(--background))",
           foreground: "hsl(var(--foreground))",
           primary: {
             DEFAULT: "hsl(var(--primary))",
             foreground: "hsl(var(--primary-foreground))",
           },
         },
       },
     },
   }
   ```

## 5. Advanced Components (P2)

1. REQUIRED: Custom variants:
   ```tsx
   // components/ui/custom-button.tsx
   import { cva } from "class-variance-authority"
   import { Button } from "@/components/ui/button"
   
   const buttonVariants = cva(
     "inline-flex items-center justify-center rounded-md text-sm font-medium",
     {
       variants: {
         variant: {
           custom: "bg-gradient-to-r from-blue-500 to-purple-500 text-white",
         },
         size: {
           xl: "h-12 px-8 text-lg",
         },
       },
     }
   )
   
   export const CustomButton = Button.bind(null)
   CustomButton.defaultProps = {
     className: buttonVariants({ variant: "custom", size: "xl" }),
   }
   ```

2. RECOMMENDED: Animations:
   ```tsx
   // components/ui/animated-dialog.tsx
   "use client"
   
   import { Dialog, DialogContent } from "@/components/ui/dialog"
   import { cn } from "@/lib/utils"
   
   export function AnimatedDialog({ children, className, ...props }) {
     return (
       <Dialog {...props}>
         <DialogContent
           className={cn(
             "animate-in fade-in-0 slide-in-from-bottom-5",
             className
           )}
         >
           {children}
         </DialogContent>
       </Dialog>
     )
   }
   ``` 