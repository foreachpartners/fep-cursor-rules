---
description: Comprehensive guidelines for UI system implementation in Next.js applications, including base components and shadcn/ui integration.
globs:
alwaysApply: false
---

# Next.js UI System Guidelines

## 1. Component Architecture (P0)

1. CRITICAL: Project structure:
   ```
   components/
   ├── ui/         # Base and shadcn/ui components
   ├── layout/     # Layout components
   ├── features/   # Feature-specific components
   └── providers/  # Context providers
   ```

2. REQUIRED: shadcn/ui setup:
   ```bash
   npx shadcn-ui@latest init
   
   # Configuration:
   √ TypeScript: Yes
   √ Style: Default
   √ Base color: Slate
   √ CSS file: app/globals.css
   √ CSS variables: Yes
   √ tailwind.config.js: tailwind.config.js
   √ Components path: @/components
   √ Utils path: @/lib/utils
   √ React Server Components: Yes
   ```

## 2. Base Components (P0)

1. CRITICAL: Component template:
   ```typescript
   // components/ui/button.tsx
   import { forwardRef } from "react"
   import { cva, type VariantProps } from "class-variance-authority"
   import { cn } from "@/lib/utils"
   
   const buttonVariants = cva(
     "inline-flex items-center justify-center rounded-md font-medium transition-colors",
     {
       variants: {
         variant: {
           primary: "bg-primary text-primary-foreground hover:bg-primary/90",
           secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/90",
           outline: "border border-input bg-transparent hover:bg-accent",
         },
         size: {
           sm: "h-9 px-3",
           md: "h-10 px-4",
           lg: "h-11 px-8",
         },
       },
       defaultVariants: {
         variant: "primary",
         size: "md",
       },
     }
   )
   
   interface ButtonProps
     extends React.ButtonHTMLAttributes<HTMLButtonElement>,
       VariantProps<typeof buttonVariants> {
     isLoading?: boolean
   }
   
   const Button = forwardRef<HTMLButtonElement, ButtonProps>(
     ({ className, children, variant, size, isLoading, ...props }, ref) => (
       <button
         className={cn(buttonVariants({ variant, size }), className)}
         ref={ref}
         {...props}
       >
         {isLoading && <span className="animate-spin mr-2">&#8635;</span>}
         {children}
       </button>
     )
   )
   ```

2. REQUIRED: Form components:
   ```typescript
   // components/ui/form.tsx
   import { zodResolver } from "@hookform/resolvers/zod"
   import { useForm } from "react-hook-form"
   import * as z from "zod"
   
   interface FormItemProps {
     label?: string
     required?: boolean
     error?: string
     children: React.ReactNode
   }
   
   export function FormItem({ label, required, error, children }: FormItemProps) {
     return (
       <div className="space-y-2">
         {label && (
           <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
             {label} {required && <span className="text-destructive">*</span>}
           </label>
         )}
         {children}
         {error && <p className="text-sm text-destructive">{error}</p>}
       </div>
     )
   }
   ```

## 3. Theme System (P0)

1. CRITICAL: CSS variables:
   ```css
   /* globals.css */
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   
   @layer base {
     :root {
       --background: 0 0% 100%;
       --foreground: 222.2 84% 4.9%;
       --primary: 222.2 47.4% 11.2%;
       --primary-foreground: 210 40% 98%;
       --secondary: 210 40% 96.1%;
       --secondary-foreground: 222.2 47.4% 11.2%;
       --accent: 210 40% 96.1%;
       --accent-foreground: 222.2 47.4% 11.2%;
       --destructive: 0 84.2% 60.2%;
       --destructive-foreground: 210 40% 98%;
       --border: 214.3 31.8% 91.4%;
       --input: 214.3 31.8% 91.4%;
       --ring: 222.2 84% 4.9%;
     }
   
     .dark {
       --background: 222.2 84% 4.9%;
       --foreground: 210 40% 98%;
       --primary: 210 40% 98%;
       --primary-foreground: 222.2 47.4% 11.2%;
       --secondary: 217.2 32.6% 17.5%;
       --secondary-foreground: 210 40% 98%;
       --accent: 217.2 32.6% 17.5%;
       --accent-foreground: 210 40% 98%;
       --destructive: 0 62.8% 30.6%;
       --destructive-foreground: 210 40% 98%;
       --border: 217.2 32.6% 17.5%;
       --input: 217.2 32.6% 17.5%;
       --ring: 212.7 26.8% 83.9%;
     }
   }
   ```

2. REQUIRED: Theme provider:
   ```typescript
   // providers/theme.tsx
   "use client"
   
   import { createContext, useContext, useEffect, useState } from "react"
   
   type Theme = "dark" | "light" | "system"
   
   const ThemeContext = createContext<{
     theme: Theme
     setTheme: (theme: Theme) => void
   }>({
     theme: "system",
     setTheme: () => null,
   })
   
   export function ThemeProvider({
     children,
     defaultTheme = "system",
   }: {
     children: React.ReactNode
     defaultTheme?: Theme
   }) {
     const [theme, setTheme] = useState<Theme>(defaultTheme)
   
     useEffect(() => {
       const root = document.documentElement
       root.classList.remove("light", "dark")
       
       if (theme === "system") {
         const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
         root.classList.add(systemTheme ? "dark" : "light")
         return
       }
       
       root.classList.add(theme)
     }, [theme])
   
     return (
       <ThemeContext.Provider value={{ theme, setTheme }}>
         {children}
       </ThemeContext.Provider>
     )
   }
   ```

## 4. Advanced Components (P1)

1. CRITICAL: Dialog component:
   ```typescript
   // components/ui/dialog.tsx
   "use client"
   
   import * as React from "react"
   import * as DialogPrimitive from "@radix-ui/react-dialog"
   import { cn } from "@/lib/utils"
   
   const Dialog = DialogPrimitive.Root
   
   const DialogTrigger = DialogPrimitive.Trigger
   
   const DialogContent = React.forwardRef<
     React.ElementRef<typeof DialogPrimitive.Content>,
     React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
   >(({ className, children, ...props }, ref) => (
     <DialogPrimitive.Portal>
       <DialogPrimitive.Overlay
         className="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
       />
       <DialogPrimitive.Content
         ref={ref}
         className={cn(
           "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
           className
         )}
         {...props}
       >
         {children}
       </DialogPrimitive.Content>
     </DialogPrimitive.Portal>
   ))
   ```

## 5. Responsive Design (P1)

1. CRITICAL: Mobile-first approach:
   ```typescript
   // Example usage
   <div className="
     grid grid-cols-1
     sm:grid-cols-2 
     md:grid-cols-3
     lg:grid-cols-4
     gap-4
   ">
     {items.map(item => <Card key={item.id} {...item} />)}
   </div>
   ```

2. REQUIRED: Breakpoint system:
   ```typescript
   // lib/hooks/use-breakpoint.ts
   import { useEffect, useState } from "react"
   
   const breakpoints = {
     sm: 640,
     md: 768,
     lg: 1024,
     xl: 1280,
     "2xl": 1536,
   }
   
   export function useBreakpoint(breakpoint: keyof typeof breakpoints) {
     const [matches, setMatches] = useState(false)
   
     useEffect(() => {
       const query = `(min-width: ${breakpoints[breakpoint]}px)`
       const mql = window.matchMedia(query)
       setMatches(mql.matches)
   
       const listener = (e: MediaQueryListEvent) => setMatches(e.matches)
       mql.addEventListener("change", listener)
       return () => mql.removeEventListener("change", listener)
     }, [breakpoint])
   
     return matches
   }
   ``` 