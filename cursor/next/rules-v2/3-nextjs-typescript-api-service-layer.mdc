---
description: "Organization of the API service layer in Next.js applications with TypeScript, TanStack Query, and mock data support"
---

# Next.js TypeScript API Service Layer

This document provides guidelines for organizing the API service layer in Next.js applications with TypeScript. It focuses on clean separation of concerns, type safety, and supporting mock data during development. For project structure recommendations, see @5-nextjs-typescript-project-structure.mdc. For TypeScript usage, refer to @6-nextjs-typescript-usage.mdc.

## 1. Service Layer Structure (P0)

### 1.1 Directory Structure (P0)

Organize your API service layer with the following structure:

```
services/
├── api-client.ts          # Base API client setup
├── endpoints.ts           # API endpoints constants
├── types.ts               # Shared API types
├── auth-service.ts        # Auth service
├── user-service.ts        # User service
├── product-service.ts     # Product service
└── mock/                  # Mock data for development
    ├── auth.json          # Auth mock responses
    ├── users.json         # User mock data
    ├── products.json      # Product mock data
    └── handlers.ts        # Mock service implementations
```

### 1.2 Service File Organization (P1)

Each service file should follow a consistent structure:

```typescript
// Structure for each service file (e.g., user-service.ts)
import { apiClient } from './api-client';
import { API_ENDPOINTS } from './endpoints';
import { User, CreateUserDto, UpdateUserDto } from './types';
import { ApiResponse } from '@/lib/types';

// Service interface
export interface UserService {
  getUsers(): Promise<User[]>;
  getUserById(id: string): Promise<User>;
  createUser(user: CreateUserDto): Promise<User>;
  updateUser(id: string, user: UpdateUserDto): Promise<User>;
  deleteUser(id: string): Promise<void>;
}

// Service implementation
export const userService: UserService = {
  async getUsers() {
    const response = await apiClient.get<ApiResponse<User[]>>(API_ENDPOINTS.USERS.LIST);
    return response.data;
  },
  
  async getUserById(id: string) {
    const response = await apiClient.get<ApiResponse<User>>(
      API_ENDPOINTS.USERS.DETAILS(id)
    );
    return response.data;
  },
  
  async createUser(user: CreateUserDto) {
    const response = await apiClient.post<ApiResponse<User>>(
      API_ENDPOINTS.USERS.CREATE, 
      user
    );
    return response.data;
  },
  
  async updateUser(id: string, user: UpdateUserDto) {
    const response = await apiClient.put<ApiResponse<User>>(
      API_ENDPOINTS.USERS.UPDATE(id), 
      user
    );
    return response.data;
  },
  
  async deleteUser(id: string) {
    await apiClient.delete<ApiResponse<void>>(API_ENDPOINTS.USERS.DELETE(id));
  }
};
```

## 2. API Client Implementation (P0)

### 2.1 Type-Safe API Client (P0)

Create a type-safe API client using TypeScript:

```typescript
// services/api-client.ts
import { API_BASE_URL } from '@/lib/constants';

// HTTP methods we support
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';

// API client configuration
export interface ApiClientConfig {
  baseUrl: string;
  defaultHeaders?: Record<string, string>;
}

// Request configuration
export interface RequestConfig {
  method?: HttpMethod;
  headers?: Record<string, string>;
  body?: any;
  params?: Record<string, string | number | boolean | undefined>;
  cache?: RequestCache;
  next?: NextFetchRequestConfig;
}

// Error response from API
export interface ApiErrorResponse {
  status: number;
  message: string;
  errors?: Record<string, string[]>;
}

class ApiClient {
  private baseUrl: string;
  private defaultHeaders: Record<string, string>;

  constructor(config: ApiClientConfig) {
    this.baseUrl = config.baseUrl;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      ...config.defaultHeaders,
    };
  }

  // Get the auth token for authenticated requests
  private async getAuthToken(): Promise<string | null> {
    // In a real implementation, you would get this from your auth storage
    return null;
  }

  // Build the full URL with query parameters
  private buildUrl(endpoint: string, params?: Record<string, string | number | boolean | undefined>): string {
    const url = new URL(`${this.baseUrl}${endpoint}`);
    
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined) {
          url.searchParams.append(key, String(value));
        }
      });
    }
    
    return url.toString();
  }

  // Make an API request
  public async request<T>(endpoint: string, config: RequestConfig = {}): Promise<T> {
    const { 
      method = 'GET', 
      headers = {}, 
      body, 
      params,
      cache,
      next 
    } = config;

    // Get the auth token
    const token = await this.getAuthToken();
    
    // Build the request headers
    const requestHeaders: HeadersInit = {
      ...this.defaultHeaders,
      ...headers,
    };
    
    // Add the auth token if available
    if (token) {
      requestHeaders['Authorization'] = `Bearer ${token}`;
    }
    
    // Build the request configuration
    const requestConfig: RequestInit = {
      method,
      headers: requestHeaders,
      cache,
      next,
    };
    
    // Add the request body for non-GET requests
    if (body && method !== 'GET') {
      requestConfig.body = JSON.stringify(body);
    }
    
    // Build the full URL
    const url = this.buildUrl(endpoint, params);
    
    try {
      // Make the request
      const response = await fetch(url, requestConfig);
      
      // Check if the response is ok
      if (!response.ok) {
        let errorData: ApiErrorResponse;
        
        try {
          errorData = await response.json() as ApiErrorResponse;
        } catch (error) {
          // If the response is not JSON
          errorData = {
            status: response.status,
            message: response.statusText,
          };
        }
        
        throw errorData;
      }
      
      // Return the response data
      if (response.headers.get('Content-Type')?.includes('application/json')) {
        return response.json();
      }
      
      return response.text() as unknown as T;
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }
  
  // Convenience methods for common HTTP methods
  public async get<T>(endpoint: string, config: Omit<RequestConfig, 'method' | 'body'> = {}): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'GET' });
  }
  
  public async post<T>(endpoint: string, body: any, config: Omit<RequestConfig, 'method'> = {}): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'POST', body });
  }
  
  public async put<T>(endpoint: string, body: any, config: Omit<RequestConfig, 'method'> = {}): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'PUT', body });
  }
  
  public async patch<T>(endpoint: string, body: any, config: Omit<RequestConfig, 'method'> = {}): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'PATCH', body });
  }
  
  public async delete<T>(endpoint: string, config: Omit<RequestConfig, 'method'> = {}): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'DELETE' });
  }
}

// Create and export a single instance of the API client
export const apiClient = new ApiClient({
  baseUrl: API_BASE_URL,
});

export default apiClient;
```

### 2.2 API Endpoint Constants (P0)

Use type-safe constants for API endpoints:

```typescript
// services/endpoints.ts
import { API_BASE_URL } from '@/lib/constants';

// API endpoints with type safety
export const API_ENDPOINTS = {
  AUTH: {
    LOGIN: `${API_BASE_URL}/auth/login`,
    REGISTER: `${API_BASE_URL}/auth/register`,
    LOGOUT: `${API_BASE_URL}/auth/logout`,
    REFRESH_TOKEN: `${API_BASE_URL}/auth/refresh`,
    ME: `${API_BASE_URL}/auth/me`,
  },
  USERS: {
    LIST: `${API_BASE_URL}/users`,
    DETAILS: (id: string) => `${API_BASE_URL}/users/${id}`,
    CREATE: `${API_BASE_URL}/users`,
    UPDATE: (id: string) => `${API_BASE_URL}/users/${id}`,
    DELETE: (id: string) => `${API_BASE_URL}/users/${id}`,
    PROFILE: `${API_BASE_URL}/users/profile`,
  },
  PRODUCTS: {
    LIST: `${API_BASE_URL}/products`,
    DETAILS: (id: string) => `${API_BASE_URL}/products/${id}`,
    CREATE: `${API_BASE_URL}/products`,
    UPDATE: (id: string) => `${API_BASE_URL}/products/${id}`,
    DELETE: (id: string) => `${API_BASE_URL}/products/${id}`,
  },
} as const;

// Types derived from the endpoints object
export type ApiEndpoints = typeof API_ENDPOINTS;
export type ApiEndpointCategory = keyof ApiEndpoints;
```

### 2.3 API Type Definitions (P0)

Define shared types for your API:

```typescript
// services/types.ts
import { User, Pagination } from '@/lib/types';

// User-related DTOs
export interface CreateUserDto {
  name: string;
  email: string;
  password: string;
}

export interface UpdateUserDto {
  name?: string;
  email?: string;
  password?: string;
}

// Authentication-related types
export interface LoginDto {
  email: string;
  password: string;
}

export interface RegisterDto {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
}

export interface AuthResponse {
  user: User;
  token: string;
  refreshToken: string;
}

// Pagination and filtering
export interface PaginationParams {
  page?: number;
  limit?: number;
  sort?: string;
  order?: 'asc' | 'desc';
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: Pagination;
}
```

## 3. Error Handling (P1)

### 3.1 Error Types (P1)

Define common error types:

```typescript
// lib/errors.ts
export class ApiError extends Error {
  status: number;
  errors?: Record<string, string[]>;

  constructor(message: string, status: number, errors?: Record<string, string[]>) {
    super(message);
    this.name = 'ApiError';
    this.status = status;
    this.errors = errors;
  }
}

export class NetworkError extends Error {
  constructor(message = 'Network error occurred') {
    super(message);
    this.name = 'NetworkError';
  }
}

export class AuthenticationError extends ApiError {
  constructor(message = 'Authentication required') {
    super(message, 401);
    this.name = 'AuthenticationError';
  }
}

export class AuthorizationError extends ApiError {
  constructor(message = 'You do not have permission to access this resource') {
    super(message, 403);
    this.name = 'AuthorizationError';
  }
}

export class NotFoundError extends ApiError {
  constructor(message = 'Resource not found') {
    super(message, 404);
    this.name = 'NotFoundError';
  }
}

export class ValidationError extends ApiError {
  constructor(message = 'Validation failed', errors?: Record<string, string[]>) {
    super(message, 422, errors);
    this.name = 'ValidationError';
  }
}
```

### 3.2 Error Handling in Services (P1)

Implement proper error handling in services:

```typescript
// Example in user-service.ts
import { ApiError, NotFoundError, ValidationError } from '@/lib/errors';

export const userService: UserService = {
  async getUserById(id: string) {
    try {
      const response = await apiClient.get<ApiResponse<User>>(
        API_ENDPOINTS.USERS.DETAILS(id)
      );
      return response.data;
    } catch (error) {
      // Handle specific error types
      if (error instanceof ApiError) {
        if (error.status === 404) {
          throw new NotFoundError(`User with ID ${id} not found`);
        }
        // Re-throw other API errors
        throw error;
      }
      
      // Handle unexpected errors
      console.error('Failed to get user:', error);
      throw new Error('An unexpected error occurred while fetching user data');
    }
  },
  
  // Other methods with similar error handling
};
```

## 4. API Integration with TanStack Query (P1)

### 4.1 Setting Up Providers (P1)

```tsx
// app/providers.tsx
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { useState } from 'react';

export function Providers({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 1000, // 1 minute
        retry: 1,
        refetchOnWindowFocus: false,
      },
    },
  }));

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}
```

### 4.2 Creating Custom Hooks (P1)

Create custom hooks for each service operation:

```typescript
// hooks/use-users.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { userService } from '@/services/user-service';
import { User, CreateUserDto, UpdateUserDto } from '@/services/types';

// Query key factory
export const userKeys = {
  all: ['users'] as const,
  lists: () => [...userKeys.all, 'list'] as const,
  list: (filters: any) => [...userKeys.lists(), { filters }] as const,
  details: () => [...userKeys.all, 'detail'] as const,
  detail: (id: string) => [...userKeys.details(), id] as const,
};

// Get all users
export function useUsers() {
  return useQuery({
    queryKey: userKeys.lists(),
    queryFn: () => userService.getUsers(),
  });
}

// Get user by ID
export function useUser(id: string) {
  return useQuery({
    queryKey: userKeys.detail(id),
    queryFn: () => userService.getUserById(id),
    enabled: !!id,
  });
}

// Create user
export function useCreateUser() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (user: CreateUserDto) => userService.createUser(user),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
  });
}

// Update user
export function useUpdateUser() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, user }: { id: string; user: UpdateUserDto }) => 
      userService.updateUser(id, user),
    onSuccess: (updatedUser) => {
      queryClient.invalidateQueries({ queryKey: userKeys.detail(updatedUser.id) });
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
  });
}

// Delete user
export function useDeleteUser() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (id: string) => userService.deleteUser(id),
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({ queryKey: userKeys.detail(id) });
      queryClient.invalidateQueries({ queryKey: userKeys.lists() });
    },
  });
}
```

### 4.3 Using Hooks in Components (P2)

```tsx
// Example usage in a component
'use client';

import { useUsers, useUser, useCreateUser, useUpdateUser, useDeleteUser } from '@/hooks/use-users';

export function UserManagement() {
  const { data: users, isLoading, error } = useUsers();
  const createUser = useCreateUser();
  
  const handleCreate = async (formData: FormData) => {
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    
    try {
      await createUser.mutateAsync({ name, email, password });
      // Show success message
    } catch (error) {
      // Handle error
      console.error('Failed to create user:', error);
    }
  };
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  
  return (
    <div>
      <h1>Users</h1>
      {/* User list and form */}
    </div>
  );
}
```

## 5. Mock Data for Development (P2)

### 5.1 JSON Mock Data (P2)

Create realistic mock data for development:

```json
// services/mock/users.json
[
  {
    "id": "1",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "admin"
  },
  {
    "id": "2",
    "name": "Jane Smith",
    "email": "jane@example.com",
    "role": "user"
  }
]
```

### 5.2 Mock Service Handlers (P2)

Create mock implementations of your services:

```typescript
// services/mock/handlers.ts
import users from './users.json';
import { User, CreateUserDto, UpdateUserDto } from '../types';
import { UserService } from '../user-service';
import { ApiError, NotFoundError, ValidationError } from '@/lib/errors';

// Mock user service
export const mockUserService: UserService = {
  async getUsers(): Promise<User[]> {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 500));
    return users as User[];
  },
  
  async getUserById(id: string): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const user = users.find(user => user.id === id);
    
    if (!user) {
      throw new NotFoundError(`User with ID ${id} not found`);
    }
    
    return user as User;
  },
  
  async createUser(userData: CreateUserDto): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Validate email is unique
    if (users.some(user => user.email === userData.email)) {
      throw new ValidationError('Validation failed', {
        email: ['Email is already taken']
      });
    }
    
    const newUser: User = {
      id: String(users.length + 1),
      ...userData,
      role: 'user'
    };
    
    // In a real mock, we might update the in-memory array
    // users.push(newUser);
    
    return newUser;
  },
  
  async updateUser(id: string, userData: UpdateUserDto): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const userIndex = users.findIndex(user => user.id === id);
    
    if (userIndex === -1) {
      throw new NotFoundError(`User with ID ${id} not found`);
    }
    
    // In a real mock, we might update the in-memory object
    // const updatedUser = { ...users[userIndex], ...userData };
    // users[userIndex] = updatedUser;
    
    return { ...users[userIndex], ...userData } as User;
  },
  
  async deleteUser(id: string): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const userIndex = users.findIndex(user => user.id === id);
    
    if (userIndex === -1) {
      throw new NotFoundError(`User with ID ${id} not found`);
    }
    
    // In a real mock, we might update the in-memory array
    // users.splice(userIndex, 1);
  }
};
```

### 5.3 Using Mock Services (P2)

Use a feature flag to switch between real and mock services:

```typescript
// services/index.ts
import { userService } from './user-service';
import { mockUserService } from './mock/handlers';

// Environment variables or a configuration file would determine this
const USE_MOCK = process.env.NEXT_PUBLIC_USE_MOCK === 'true';

// Export the appropriate service implementation
export const UserService = USE_MOCK ? mockUserService : userService;
``` 