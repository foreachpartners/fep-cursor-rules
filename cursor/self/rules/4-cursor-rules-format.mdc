---
description: Technical formatting requirements and validation criteria for rule files. Apply when creating or validating rule files to ensure they meet technical specifications, language requirements, and formatting standards.
globs:
alwaysApply: true
---

# Cursor Rules Technical Format

## 1. Rule File Application Requirements (P0)

1. This document MUST be applied when making any changes to rule files
2. CRITICAL: Always check rule files against these requirements before finalizing changes
3. REQUIRED: Validate that no formatting or structure issues were introduced during edits
4. Apply these checks for both new rules and modifications to existing rules

## 2. Basic Rule Formatting Requirements (P0)

1. All rules MUST be numbered consecutively as shown in @3-cursor-rules-structure.mdc
   ```markdown
   # Formatting example:
   ## 2. Core Principles (P0)
   
   1. Write DRY (Don't Repeat Yourself) code
   2. Place the most important and frequently used rules first
   3. NEVER duplicate content across rule files
   ```

2. Use `.mdc` file extension for all rule files
3. Content must not exceed 500 lines per file 
4. File structure by rule type:
   - Primary Rule File: 50-250 lines (~2-7K tokens)
   - Secondary Rule File: 100-500 lines (~3-15K tokens)
   - Context Budget: Rules ≤20% of context window
5. Use valid Markdown syntax checked with markdownlint
6. Apply consistent hierarchical heading structure (H1→H2→H3→H4)
7. Prefer concise lists over long text paragraphs - always use numbered lists
8. Write all rules in English only (no Cyrillic or other non-Latin scripts)
9. YAML frontmatter MUST include:
   1. `description` field without quotation marks
   2. Empty `globs:` field without value
   3. `alwaysApply` set to `true` for Primary Rules, `false` for Secondary Rules unless explicitly instructed otherwise by the user
   ```yaml
   # Example YAML frontmatter:
   ---
   description: Core guidelines for developing Python/Django rules.
   globs:
   alwaysApply: true
   ---
   ```
10. Ensure cross-references use proper `@` notation
    ```markdown
    # Correct reference examples:
    MUST follow @1-cursor-rules-guide.mdc for core principles.
    REQUIRED to implement @react-components.mdc for component details.
    ```

## 3. Validation Tools and Process (P0)

1. CRITICAL: All rule changes MUST be validated using the following tools:
   - Markdown linters to verify syntax and formatting
   - Line and token count tools to check size constraints
   - Format validation scripts to verify technical requirements

2. Technical validation checks to run:
   - YAML frontmatter field validation
   - Heading structure verification
   - Rule numbering consistency check
   - Cross-reference format verification
   - Language compliance (English-only)
   - Line and token count verification

3. Run all validations after any changes to rule files using these commands:
   ```bash
   # Validation command:
   # Check markdown syntax
   markdownlint rules/*.mdc
   
   # Count lines:
   wc -l rules/*.mdc
   python tools/count_tokens.py rules/*.mdc
   ```

4. Document validation results for reference in change logs

## 4. Resolving Validation Failures (P0)

1. When validation checks fail, identify specific issues from error reports
2. Address each issue individually in order of priority:
   1. YAML frontmatter errors (critical)
   2. Line count/size constraint violations
   3. Heading structure and numbering problems
   4. Cross-reference formatting issues
   5. Language compliance issues

3. Rerun validation tools after making corrections
4. Continue correction-validation cycle until all checks pass
5. CRITICAL: Do not consider rule changes complete until all validations pass
