---
description: "Comprehensive guidelines for rule content and document structure. Apply when defining content for Primary and Secondary Rule Files, organizing rule documents, or establishing relationships between rule files. These guidelines ensure consistent structure and proper organization across all rule documents."
globs: 
alwaysApply: false
---

# Cursor Rules Content and Structure

## 1. Rule Document Types (P0)

1. **Primary Rule File**: Core document for the tech stack containing foundational principles
   - Serves as the main entry point for all rule consultations
   - Acts as a navigator to other rules in the set
   - Contains priority levels, core principles, and navigation guidance
   - CRITICAL: Always consult this file first to understand which rules to apply
   - REQUIRED to be concise and optimized for context window efficiency

2. **Secondary Rule Files**: Specialized documents focusing on specific aspects
   - Address particular technical areas or concerns
   - MUST be referenced by the Primary Rule File
   - REQUIRED to reference related rules without duplication
   - Optimize for specific guidance rather than general principles

## 2. File Organization and Naming (P0)

Example structure for Python/Django rules (not exhaustive, can be extended with additional files as needed):

```
python-django/rules/
├── 1-python-django-rules-guide.mdc      # Primary rule file (always starts with 1)
├── 2-python-django-style-guide.mdc      # Style guide
├── 3-python-django-testing.mdc          # Testing guidelines
└── N-python-django-area-rule.mdc        # Additional specialized rules
```

File naming must follow the pattern: `N-techstack-area-rule.mdc` using kebab-case with numerical prefix. The Primary Rule File ALWAYS starts with `1-`.

## 3. Primary Rule File Structure (P0)

A Primary Rule File (based on Python/Django example) should include:

### 3.1. Priority Levels

```markdown
## 1. Priority Levels

1. **P0** - Must implement (critical)
2. **P1** - Should implement (high importance)
3. **P2** - Recommended (medium importance)
```

### 3.2. Core Principles

Example of Core Principles section (customize for your specific tech stack):

```markdown
## 2. Core Principles (P0)

1. Write DRY (Don't Repeat Yourself) code
2. Place the most important and frequently used rules first
3. NEVER duplicate content across rule files to preserve context
4. All rule documents MUST use English language only
```

### 3.3. Rule Navigation Section

```markdown
## 3. Rule Navigation Guide (P0)

When addressing specific needs, MUST consult these rules:

### 3.1. Code Styling

1. ALWAYS begin with @1-python-django-rules-guide.mdc
2. MUST follow @2-python-django-style-guide.mdc for code formatting

### 3.2. Creating Tests

1. REQUIRED to implement @3-python-django-testing.mdc
2. CRITICAL to follow test naming conventions in @2-python-django-style-guide.mdc
```

Primary Rule File acts as a central guide directing developers to the appropriate Secondary Rule Files based on their specific needs.

## 4. Secondary Rule File Structure (P0)

Example of a Secondary Rule File (Python/Django Style Guide):

### 4.1. Purpose Statement

```markdown
## 1. Purpose (P0)

These style guidelines ensure consistent code formatting across all Python/Django projects. Apply when writing new code or refactoring existing code to maintain readability and maintainability.
```

### 4.2. Main Guidelines

```markdown
## 2. Indentation and Line Length (P0)

1. Use 4 spaces for indentation (NEVER tabs)
2. Maximum line length is 88 characters
3. CRITICAL: Configure tools like Black and flake8 to enforce these standards
4. REQUIRED: Break long lines over multiple lines using parentheses

## 3. Naming Conventions (P0)

1. CRITICAL: Use snake_case for variables, functions, and methods
2. Use PascalCase for class names
3. Use UPPER_SNAKE_CASE for constants
4. REQUIRED: Use descriptive variable names that reveal intent
```

### 4.3. Examples

```markdown
## 4. Good Examples (P1)

```python
def calculate_total_price(items, tax_rate=0.07):
    """Calculate the total price including tax.
    
    Args:
        items: List of items with 'price' attribute
        tax_rate: Tax rate as a decimal (default: 0.07)
        
    Returns:
        Total price including tax
    """
    subtotal = sum(item.price for item in items)
    return subtotal * (1 + tax_rate)
```

## 5. Bad Examples (P1)

```python
def calc(i, t=.07):
    # Calculate total with tax
    return sum([x.price for x in i]) * (1 + t)
```
```

Secondary Rule Files should be focused on their specific domains while referencing the Primary Rule File and other related Secondary Rules when needed. 