---
description: "Formatting requirements for Cursor rules"
globs: "**/*.mdc"
alwaysApply: false
related: ["cursor-rules-guide.mdc", "cursor-rules-structure.mdc"]
---

# Cursor Rules Formatting

## Priority Levels

- **P0** - Must implement (critical)
- **P1** - Should implement (high importance)
- **P2** - Recommended (medium importance)
- **P3** - Consider when possible (lower importance)

## General Format Requirements (P0)

- Use `.mdc` file extension for all rules
- Validate Markdown syntax with markdownlint
- Adhere to size constraints:
  - Rules Guide: 150-250 lines
  - Specific Rule: 300-500 lines

## YAML Frontmatter (P0)

All rule files must begin with a YAML frontmatter block:

```yaml
---
description: "Brief rule description"
globs: "file patterns this rule applies to"
alwaysApply: false
related: ["related-rule-1.mdc", "related-rule-2.mdc"]
---
```

### Frontmatter Fields

| Field | Description | Required |
|-------|-------------|----------|
| `description` | Brief rule description | Yes |
| `globs` | File glob patterns this rule applies to | Yes |
| `alwaysApply` | Flag indicating whether to always apply the rule | No (default `false`) |
| `related` | List of related rules | No |

## Document Structure (P0)

1. YAML frontmatter
2. H1 heading with rule name
3. Priority levels block
4. Main content with H2-H4 headings
5. Examples (code, counter-examples)
6. Links to related rules

## Headings (P0)

- **H1** - only for rule name (one per document)
- **H2** - for main sections
- **H3** - for subsections
- **H4** - for subsection details

## Code Examples (P1)

```markdown
## Good Example

窶義``python
def calculate_sum(a: int, b: int) -> int:
    """Calculate the sum of two numbers.
    
    Args:
        a: First number
        b: Second number
        
    Returns:
        Sum of the two numbers
    """
    return a + b
窶義``

## Bad Example

窶義``python
def calc(a, b):
    # Add numbers
    return a + b
窶義``
```

## Optimization Tips (P1)

- Use bullet lists instead of numbered lists where order is not important
- Apply tables for structured data
- Use emphasis (`**bold**`, `*italic*`) to highlight important points
- Group related rules into logical sections
- Use H2 headings as anchor points for navigation

## Avoid (P0)

- Long text paragraphs without structure
- Redundant repetition of information
- Code examples longer than 10 lines
- Complex nested lists deeper than 2 levels
- HTML markup within Markdown

## Cross-References (P1)

For links to other rules, use relative paths:

```markdown
See [Rules Structure](./cursor-rules-structure.mdc) for additional information.
```

Or direct link to a heading with an anchor:

```markdown
See [examples section](#code-examples-p1) for examples.
```

## Language (P0)

- Write all rules in English only
- Use clear, concise language
- Prefer direct statements over complex sentences
- Maintain consistent terminology throughout all rules 