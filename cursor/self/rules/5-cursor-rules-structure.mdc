---
description: "Organization and structural guidelines for rule files and directories. Apply these when creating new rules, organizing rule directories, managing rule dependencies, or structuring documentation. These standards establish consistent file hierarchies, naming conventions, and relationship management between rules."
globs: ""
alwaysApply: false
---

# Cursor Rules Structure

## 1. Directory Organization (P0)

1. All rules for a technology stack MUST be placed in a flat directory structure:
   ```
   techstackname/rules/
   ├── 1-techstack-rules-guide.mdc      # Primary rule file
   ├── 2-techstack-rules-workflow.mdc   # Development workflow
   ├── 3-techstack-rules-coverage.mdc   # Technical aspects
   ├── 4-techstack-rules-testing.mdc    # Testing guidelines
   ├── 5-techstack-rules-structure.mdc  # Structure guidelines
   ├── 6-techstack-rules-format.mdc     # Formatting requirements
   └── N-techstack-specific-rule.mdc    # Additional rules as needed
   ```

2. CRITICAL requirements:
   - NEVER create nested subdirectories within the rules folder
   - ALL rule files MUST use the `.mdc` extension
   - ALWAYS use a consistent prefix for all files (e.g., `typescript-`, `python-`, `react-`)
   - REQUIRED to follow numerical ordering (1-N) for easier navigation

## 2. File Naming (P0)

1. Use kebab-case for all rule filenames
2. MUST include numerical prefix for ordering (e.g., `1-`, `2-`, `3-`)
3. MUST follow the pattern: `N-techstackname-area-rule.mdc`
4. Examples:
   - `1-python-rules-guide.mdc`
   - `2-python-rules-workflow.mdc`
   - `7-python-error-handling.mdc`
   - `8-python-testing-practices.mdc`

## 3. Required Sections (P0)

Each rule document must include:

1. YAML frontmatter with `description` field
2. H1 heading with rule name
3. Priority levels table (only in Primary Rule File)
4. Basic concept description
5. Examples (good and bad)
6. Implementation details

## 4. Recommended Sections (P1)

Consider including:

1. Common pitfalls
2. Best practices
3. Compatibility notes

## 5. Section Ordering (P1)

1. YAML frontmatter
2. H1 title
3. Priority levels (only in Primary Rule File)
4. Introduction/overview
5. Main guidelines
6. Examples
7. Best practices
8. Common issues
9. References

## 7. Rule Dependencies (P2)

1. MUST clearly document dependencies between rules
2. ALWAYS use `@` prefix to reference other rules
3. REQUIRED to include explicit references when one rule builds on another

Example:

```markdown
This rule STRICTLY builds upon concepts introduced in @1-python-rules-guide.mdc.
```

## 8. Versioning (P1)

1. Track major changes for breaking changes
2. Track minor changes for additions
3. Track patch changes for corrections and clarifications
4. Keep a changelog for significant updates
5. Maintain consistent versioning across related rules

## 9. Context Budget Requirements (P0)

1. Ensure rules occupy ≤20% of total context window
2. Prioritize critical information at the beginning of documents
3. Remove redundant information that increases token usage
4. Break large rule sets into smaller, focused documents
5. Use concise language optimized for token efficiency

## 10. Self-Verification Mechanisms (P1)

Each rule document should include:

1. **Self-assessment questions** to verify rule application
2. **Validation checklist** for rule compliance
3. **Testing methods** specific to the rule

Example:

```markdown
## Self-Verification

To verify this rule is being followed, check:

- [ ] Is the directory structure following the prescribed pattern?
- [ ] Are all file names using kebab-case with numerical prefixes?
- [ ] Do all rules have the required sections?
- [ ] Are cross-references properly linked?
```

## 11. Success Criteria (P2)

Define measurable outcomes for rule effectiveness:

1. **Consistency**: Uniformity across rule documents
2. **Discoverability**: Ease of finding relevant rules
3. **Maintenance**: Effort required to update rules
4. **Comprehension**: Developer understanding of rules
5. **Implementation**: Rate of successful application

## 12. Language (P0)

1. Write all rules in English only
2. Use consistent terminology across all documents
3. Be precise with technical terms
4. Define specialized terms when first used 

## 13. Consistency and Non-Duplication (P0)

1. CRITICAL: Each concept MUST be defined in exactly one place
2. ALWAYS reference existing rules rather than duplicating content
3. When concepts overlap between rules, MUST designate one authoritative source
4. NEVER include redundant information that already exists in other rules
5. When similar topics appear in multiple rules, reference the canonical definition
6. REQUIRED to validate consistency between related rules before publishing

Example of correct cross-reference:

```markdown
For formatting code examples, STRICTLY follow the standards in @6-python-rules-format.mdc rather than duplicating those guidelines here.
``` 