---
description: "Organization and structure of rules for Cursor"
globs: "**/*.mdc"
alwaysApply: false
related: ["cursor-rules-guide.mdc", "cursor-rules-format.mdc"]
version: "1.0.0"
---

# Cursor Rules Structure

## 1. Priority Levels

- **P0** - Must implement (critical)
- **P1** - Should implement (high importance)
- **P2** - Recommended (medium importance)
- **P3** - Consider when possible (lower importance)

## 2. Directory Organization (P0)

Organize rules by technology stack:

```
cursor/self/rules/
├── cursor-rules-guide.mdc            # General guide
├── cursor-rules-format.mdc           # Formatting requirements
├── cursor-rules-structure.mdc        # Structure guidelines
├── cursor-rules-testing.mdc          # Testing guidelines
├── javascript/                       # JavaScript stack rules
│   ├── react/                        # React-specific rules
│   ├── vue/                          # Vue-specific rules
│   └── ...
├── python/                           # Python stack rules
├── golang/                           # Go stack rules
└── ...
```

## 3. File Naming (P0)

- Use kebab-case for all rule filenames
- Follow the pattern: `technology-area-rule.mdc`
- Examples:
  - `react-component-structure.mdc`
  - `python-error-handling.mdc`
  - `typescript-typing-best-practices.mdc`

## 4. Required Sections (P0)

Each rule document must include:

1. YAML frontmatter with `description`, `globs`, and `related` fields
2. H1 heading with rule name
3. Priority levels table
4. Basic concept description
5. Examples (good and bad)
6. Implementation details

## 5. Recommended Sections (P1)

Consider including:

- Common pitfalls
- Best practices
- Compatibility notes
- Performance considerations
- Security implications

## 6. Section Ordering (P1)

1. YAML frontmatter
2. H1 title
3. Priority levels
4. Introduction/overview
5. Main guidelines
6. Examples
7. Best practices
8. Common issues
9. References

## 7. Rule Hierarchy (P2)

Implement hierarchical structure for rules:

1. **Meta rules** - Rules about rules (like this document)
2. **Framework rules** - General rules for frameworks
3. **Component/module rules** - Rules for specific components 
4. **Implementation rules** - Detailed implementation guidelines

## 8. Rule Dependencies (P2)

- Clearly document dependencies between rules
- Use `related` field in frontmatter to indicate related rules
- Include explicit references in text when one rule builds on another

## 9. Versioning (P1)

- Rules must include a version in the frontmatter (format: `version: "X.Y.Z"`)
- Major version (X) changes for breaking changes
- Minor version (Y) changes for additions
- Patch version (Z) for corrections and clarifications
- Keep a changelog for significant updates
- Version numbers should be consistent across related rules

## 10. Context Budget Requirements (P0)

- Ensure rules occupy ≤20% of total context window
- Prioritize critical information at the beginning of documents
- Remove redundant information that increases token usage
- Break large rule sets into smaller, focused documents
- Use concise language optimized for token efficiency

## 11. Self-Verification Mechanisms (P1)

Each rule document should include:

1. **Self-assessment questions** to verify rule application
2. **Validation checklist** for rule compliance
3. **Testing methods** specific to the rule

Example:

```markdown
## Self-Verification

To verify this rule is being followed, check:

- [ ] Is the directory structure following the prescribed pattern?
- [ ] Are all file names using kebab-case?
- [ ] Do all rules have the required sections?
- [ ] Are cross-references properly linked?
```

## 12. Success Criteria (P2)

Define measurable outcomes for rule effectiveness:

- **Consistency**: Uniformity across rule documents
- **Discoverability**: Ease of finding relevant rules
- **Maintenance**: Effort required to update rules
- **Comprehension**: Developer understanding of rules
- **Implementation**: Rate of successful application

## 13. Language (P0)

- Write all rules in English only
- Use consistent terminology across all documents
- Be precise with technical terms
- Define specialized terms when first used 